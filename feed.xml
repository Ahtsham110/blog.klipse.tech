<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://blog.klipse.tech//feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.klipse.tech//" rel="alternate" type="text/html" /><updated>2020-11-29T17:20:53+00:00</updated><id>https://blog.klipse.tech//feed.xml</id><title type="html">An interactive journey into functional programming with Yehonathan Sharvit</title><subtitle>A journey into functional programming wonders: Clojure, Clojurescript, javascript and ruby. Live Repl. Live Coding. gist. dynamic code. Interactive Code Snippets.
</subtitle><author><name>Yehonathan Sharvit</name></author><entry><title type="html">Functional Lodash</title><link href="https://blog.klipse.tech//javascript/2020/11/26/lodash-fp.html" rel="alternate" type="text/html" title="Functional Lodash" /><published>2020-11-26T01:43:52+00:00</published><updated>2020-11-26T01:43:52+00:00</updated><id>https://blog.klipse.tech//javascript/2020/11/26/lodash-fp</id><content type="html" xml:base="https://blog.klipse.tech//javascript/2020/11/26/lodash-fp.html">&lt;p&gt;Did you know that &lt;a href=&quot;https://lodash.com/&quot;&gt;Lodash&lt;/a&gt; - the popular JavaScript utility library - had a &lt;strong&gt;functional&lt;/strong&gt; flavor?&lt;/p&gt;

&lt;p&gt;The most exciting part to me is that functions of Lodash FP do not &lt;strong&gt;mutate&lt;/strong&gt; the data they receive.&lt;/p&gt;

&lt;p&gt;As a Clojure developer, I am excited because I am &lt;strong&gt;addicted&lt;/strong&gt; to &lt;strong&gt;data immutability&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/serenity-immutability.png&quot; alt=&quot;Immutability&quot; /&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot; /&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot; /&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;Lodash FP differs from the standard Lodash on 4 main points:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The functions receive the &lt;strong&gt;data&lt;/strong&gt; to be manipulated as &lt;strong&gt;last argument&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;The functions &lt;strong&gt;do not mutate&lt;/strong&gt; the data they manipulate&lt;/li&gt;
  &lt;li&gt;The functions are &lt;strong&gt;auto curried&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;The functions receive the &lt;strong&gt;iteratee&lt;/strong&gt; as &lt;strong&gt;first argument&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;immutability&quot;&gt;Immutability&lt;/h1&gt;

&lt;p&gt;In Lodash FP, the functions do not &lt;strong&gt;mutate&lt;/strong&gt; the data they manipulate.&lt;/p&gt;

&lt;p&gt;For instance, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set()&lt;/code&gt; function differs from the standard Lodash in two points:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It receives the object as &lt;strong&gt;last argument&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;It returns a &lt;strong&gt;new version&lt;/strong&gt; of the object instead of modifying the object&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the following code snippet, you see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; is not modified by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fp.set()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var a = {foo: 1};
var b = fp.set(&quot;foo&quot;, 2, a);
a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However in standard Lodash, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; is modified by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.set()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var a = {foo: 1};
var b = _.set(a, &quot;foo&quot;, 2);
a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be aware that the &lt;a href=&quot;https://github.com/lodash/lodash/commit/f132c0024fccd4a2b4d6fbd18df37d7b7996312e&quot;&gt;implementation&lt;/a&gt; of the data immutability is via &lt;strong&gt;deep cloning&lt;/strong&gt;. When the objects are big, the &lt;strong&gt;performance hit&lt;/strong&gt; of deep cloning might be an issue. You might prefer to use a library that implement persistent data structures to avoid this performance hit. But then youâ€™d have to pay the price of &lt;strong&gt;converting persistent data structures&lt;/strong&gt; to native objects back and forth (like I illustrated in &lt;a href=&quot;/javascript/2020/11/09/immutable-manipulate.html&quot;&gt;this article&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&quot;auto-currying&quot;&gt;Auto currying&lt;/h1&gt;

&lt;p&gt;In Lodash FP, the functions that receive an &lt;strong&gt;iteratee&lt;/strong&gt; (a piece of code that expresses the data manipulation) receive the iteratee as &lt;strong&gt;first argument&lt;/strong&gt; and are &lt;strong&gt;curried&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map()&lt;/code&gt; receive a single argument (the iteratee) and return a function to be called on a collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;fp.map(x =&amp;gt; x +1)([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce()&lt;/code&gt; function receive two arguments (the iteratee and the accumulator) and return a function to be called on a collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;fp.reduce((a,b) =&amp;gt; a + b, 0)([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;

&lt;p&gt;The installation instruction and the semantics of the functional flavor are exposed in &lt;a href=&quot;https://github.com/lodash/lodash/wiki/FP-Guide&quot;&gt;Lodash FP Guide&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/g/lodash@4(lodash.min.js+lodash.fp.min.js)&quot;&gt;&lt;/script&gt;

&lt;script&gt;
var fp = _.noConflict();
&lt;/script&gt;</content><author><name>Yehonathan Sharvit</name></author><summary type="html">Did you know that Lodash - the popular JavaScript utility library - had a functional flavor?</summary></entry><entry><title type="html">Manipulate immutable collections with no performance hit.</title><link href="https://blog.klipse.tech//javascript/2020/11/09/immutable-manipulate.html" rel="alternate" type="text/html" title="Manipulate immutable collections with no performance hit." /><published>2020-11-09T00:21:34+00:00</published><updated>2020-11-09T00:21:34+00:00</updated><id>https://blog.klipse.tech//javascript/2020/11/09/immutable-manipulate</id><content type="html" xml:base="https://blog.klipse.tech//javascript/2020/11/09/immutable-manipulate.html">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/immutable/3.8.2/immutable.min.js&quot; integrity=&quot;sha512-myCdDiGJRYrvRb/VuJ67ljifYTJdc1jdEvL4c4ftX9o3N6EAnmD83c/7l2/91RCINZ7c8w21tiXDT7RDFjdc3g==&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js&quot; integrity=&quot;sha512-90vH1Z83AJY9DmlWa8WkjkV79yfS2n2Oxhsi2dZbIv0nC4E6m5AbH8Nh156kkM7JePmqD6tcZsfad1ueoaovww==&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;

&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot; /&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot; /&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;Constraining our programs to manipulate &lt;strong&gt;immutable data structures&lt;/strong&gt; is &lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;known to be beneficial&lt;/a&gt; in terms of code predictability, concurrency and safety.&lt;/p&gt;

&lt;p&gt;In a language like Clojure, where immutable data structures are native to the language, this benefits come for free.
However, in languages where immutable data structures are not &lt;strong&gt;native&lt;/strong&gt; to the language, the &lt;strong&gt;price&lt;/strong&gt; we have to pay to benefit from data immutability is that we need to &lt;strong&gt;convert the data back and forth&lt;/strong&gt; from immutable to native. Beside the inconvenience of this conversion, it might cause a &lt;strong&gt;performance hit&lt;/strong&gt;, it we are not careful with the conversion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/fast-car-infiniti.jpg&quot; alt=&quot;Car&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The purpose of the is article is to illustrate how to manipulate carefully immutable data collection from Immutable.js with the a data manipulation library like Lodash.js, leveraging Immutableâ€™s &lt;strong&gt;shallow and deep conversion&lt;/strong&gt; functions.&lt;/p&gt;

&lt;p&gt;A similar approach could be applied to other immutable data collection libraries and other data manipulation libraries (and also to other programming languages).&lt;/p&gt;

&lt;p&gt;Imagine we have a nested piece of data that we want to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Treat as &lt;strong&gt;immutable&lt;/strong&gt; (e.g Immutable.js)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Manipulate&lt;/strong&gt; with data manipulation library (e.g Lodash.js)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The challenge is that Immutable.js data collections are not native JavaScript objects. Therefore, before passing the data to a JS lib, we have to convert it to a JS object. In this article, we are going to show how to convert to JS without impacting the performance too much.&lt;/p&gt;

&lt;p&gt;Letâ€™s take as an example the data of a library, that might looks similar to this nested object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var libraryData = {
  &quot;name&quot;: &quot;The smallest library on earth&quot;,
  &quot;address&quot;: &quot;Here and now&quot;,
  &quot;catalog&quot;: {
    &quot;books&quot;: [
      {
        &quot;title&quot;: &quot;Watchmen&quot;,
        &quot;publicationYear&quot;: 1986,
        &quot;authors&quot;: [
          {
            &quot;firstName&quot;: &quot;Alan&quot;,
            &quot;lastName&quot;: &quot;Moore&quot;
          },
          {
            &quot;firstName&quot;: &quot;Dave&quot;,
            &quot;lastName&quot;: &quot;Gibbons&quot;
          }
        ]
      },
      {
        &quot;title&quot;: &quot;Jimmy Corrigan, the Smartest Kid on Earth&quot;,
        &quot;publicationYear&quot;: 2000,
        &quot;authors&quot;: [
          {
            &quot;firstName&quot;: &quot;Chris&quot;,
            &quot;lastName&quot;: &quot;Ware&quot;
          }
        ]
      },
      {
        &quot;title&quot;: &quot;Ultimate Spider-Man&quot;,
        &quot;publicationYear&quot;: 2000,
        &quot;authors&quot;: [
          {
            &quot;firstName&quot;: &quot;Brian Michael&quot;,
            &quot;lastName&quot;: &quot;Bendis&quot;
          }
        ]
      }
    ]
  },
  &quot;users&quot;: [
    {&quot;username&quot;: &quot;user-1&quot;}, {&quot;username&quot;: &quot;user-2&quot;}, {&quot;username&quot;: &quot;user-3&quot;}
  ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we convert the native JS object to an Immutable map with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fromJS()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var immutableLibData = Immutable.fromJS(libraryData);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our purpose is to find the best way to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.countBy()&lt;/code&gt; on our immutable collection, in the same way as we would use it on the JS native object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;_.countBy(immutableLibData.toJS().catalog.books, &quot;publicationYear&quot;); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Immutable.js provides a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.toJS()&lt;/code&gt; function that &lt;strong&gt;deeply converts&lt;/strong&gt; an immutable collection to a JS object or array.&lt;/p&gt;

&lt;p&gt;We are then free to pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;immutableLibData.toJS()&lt;/code&gt; to any Lodash function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;_.countBy(immutableLibData.toJS().catalog.books, &quot;publicationYear&quot;); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is that it causes a &lt;strong&gt;performance hit&lt;/strong&gt;, as we have to convert the whole &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;immutableLibData&lt;/code&gt; immutable collection (including the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt; part which is unnecessary)&lt;/p&gt;

&lt;p&gt;A better solution is to convert only the part of the data that we are interested in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;_.countBy(immutableLibData.getIn([&quot;catalog&quot;, &quot;books&quot;]).toJS(), &quot;publicationYear&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But still, there is a performance hit as we convert the books data deeply (including the authors part which is unnecessary).&lt;/p&gt;

&lt;p&gt;The best thing we can do, is to do a careful shallow conversion to native JS: It requires 2 steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Shallow convert&lt;/strong&gt; books to a JS array with Immutableâ€™s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toArray()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Shallow convert&lt;/strong&gt; each object of the books array to a JS object with Immutableâ€™s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toObject()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the code for that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;function toArrayofObjects(m) {
  return m.toArray().map(x =&amp;gt; x.toObject());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.countBy()&lt;/code&gt; with no unnecessary performance hit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;_.countBy(toArrayofObjects(immutableLibData.getIn([&quot;catalog&quot;, &quot;books&quot;])), &quot;publicationYear&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A similar approach could be applied to other immutable data collection libraries and other data manipulation libraries (and also to other programming languages). The &lt;strong&gt;features&lt;/strong&gt; that the immutable data collection library needs to provide are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Deep conversion&lt;/strong&gt; to native objects (like Immutable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toJS()&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Shallow conversion&lt;/strong&gt; to native objects (like Immutable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toArray()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toObject()&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Enjoy immutability!&lt;/p&gt;

&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot; /&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot; /&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br /&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><summary type="html"></summary></entry><entry><title type="html">Decrease complexity by separating Code from Data</title><link href="https://blog.klipse.tech//databook/2020/10/30/data-book-chap2-part1.html" rel="alternate" type="text/html" title="Decrease complexity by separating Code from Data" /><published>2020-10-30T07:21:32+00:00</published><updated>2020-10-30T07:21:32+00:00</updated><id>https://blog.klipse.tech//databook/2020/10/30/data-book-chap2-part1</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/10/30/data-book-chap2-part1.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;introduction&quot; class=&quot;sect0&quot;&gt;Introduction&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we mentioned in &lt;a href=&quot;/databook/2020/09/29/do-principles.html&quot;&gt;Chapter 0&lt;/a&gt;, the big insight of Data Oriented Programming (DO) is that we can &lt;strong&gt;decrease the complexity&lt;/strong&gt; of our systems by &lt;strong&gt;separating code from data&lt;/strong&gt;. Indeed, when code is separated from data, our systems are made of two main pieces that can be &lt;strong&gt;thought separately&lt;/strong&gt;: Data entities and Code modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This chapter is a deep dive in DO Principle #1:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Principle #1: Separate &lt;strong&gt;code&lt;/strong&gt; from &lt;strong&gt;data&lt;/strong&gt; in a way that the &lt;strong&gt;code&lt;/strong&gt; resides in functions whose behavior does not depend on &lt;strong&gt;data&lt;/strong&gt; that is somehow encapsulated in the function&amp;#8217;s context.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We &lt;strong&gt;illustrate&lt;/strong&gt; the separation between code and data in the context of a Library Management system and we unveil the &lt;strong&gt;benefits&lt;/strong&gt; that this separation brings to the system:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The system is &lt;strong&gt;simple&lt;/strong&gt;: it is easy to understand&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The system is &lt;strong&gt;flexible&lt;/strong&gt;: quite often, it requires no design changes to adapt to changing requirements&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We show how to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Design a system&lt;/strong&gt; where code and data are separate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write code&lt;/strong&gt; that respects the separation between code and data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This chapter focuses on the &lt;strong&gt;design of the code part&lt;/strong&gt; of a system where code and data are separate. In Chapter 3, we will focus on the &lt;strong&gt;design of the data part&lt;/strong&gt; of the system. As we progress in the book, we will discover other benefits of separating code from data.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;the-two-parts-of-a-do-system&quot; class=&quot;sect0&quot;&gt;The two parts of a DO system&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You invite Joe to your office. Joe is a 40-year old developer that used to be a Java developer for many years and moved to Clojure 7 years ago.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you tell Joe about the Library management system you built (Chapter 1) and the struggle you had to adapt to changing requirements, he is not surprised.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Joe tells you that the systems he and his team have build in Clojure over the last 7 years are &lt;strong&gt;less complex&lt;/strong&gt; and &lt;strong&gt;more flexible&lt;/strong&gt; than the systems he used to build in Java. The main cause of this benefits is that the systems he built were following principles of Data Oriented Programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; What makes DO systems &lt;strong&gt;less complex&lt;/strong&gt; and &lt;strong&gt;more flexible&lt;/strong&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; The first &lt;strong&gt;insight&lt;/strong&gt; of DO is about the relationships between &lt;strong&gt;code&lt;/strong&gt; and &lt;strong&gt;data&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; You mean the &lt;strong&gt;encapsulation&lt;/strong&gt; of data in objects?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Actually, DO is against encapsulation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; Why is that? I thought encapsulation was a positive programming paradigm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Data encapsulation has its merits and drawbacks: Think again at what happened when you implemented Nancy&amp;#8217;s LMS (in Chapter 1). According to DO, the main cause of the &lt;strong&gt;complexity&lt;/strong&gt; of systems and their &lt;strong&gt;lack of flexibility&lt;/strong&gt; is because code and data are mixed together (in objects).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; Does it mean that in order to adhere to DO, I need to get rid of OO and learn a Functional programming language?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; No. DO principles are &lt;strong&gt;language agnostic&lt;/strong&gt;: they can be applied both in OO and FP languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; Cool! I was afraid that you were going to teach me about monads, algebraic data types and high order functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; None of this is required in DO.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; How does the separation between code and data looks like in DO?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Data is represented by &lt;strong&gt;data entities&lt;/strong&gt; that hold members only. Code is aggregated into &lt;strong&gt;modules&lt;/strong&gt; where all the functions are &lt;strong&gt;stateless&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; What do you mean by stateless functions?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Instead of having the state encapsulated in the object, the data entity is passed as an argument.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; I don&amp;#8217;t get that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Let me make it &lt;a href=&quot;#principle1-nutshell&quot;&gt;visual&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; It&amp;#8217;s still not clear&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; It will become clearer when I show you how it looks like in the context of your library management system.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;principle1-nutshell&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/data-book/uml/chapter02/principle1-nutshell.png&quot; alt=&quot;principle1 nutshell&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. The separation between code and data&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU&lt;/strong&gt;: OK. Shall we start we code or with data?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Well, it&amp;#8217;s &lt;strong&gt;Data&lt;/strong&gt; oriented programming. Let&amp;#8217;s start with Data!&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;data-entities&quot; class=&quot;sect0&quot;&gt;Data entities&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DO, we start the design process by discovering the data entities of our system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; What are the &lt;strong&gt;data entities&lt;/strong&gt; of your system?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; What do you mean by &lt;em&gt;data entities&lt;/em&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; I mean the parts of your system that hold &lt;strong&gt;information&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; Well, it&amp;#8217;s a library management system, so for sure we have &lt;strong&gt;books&lt;/strong&gt; and &lt;strong&gt;members&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Of course. But there are more: One way to discover the data entities of a system is to look for nouns and &lt;strong&gt;noun phrases&lt;/strong&gt; in the requirements of the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You look at Nancy&amp;#8217;s requirement napkin and you highlight the &lt;strong&gt;nouns&lt;/strong&gt; and  &lt;strong&gt;noun phrases&lt;/strong&gt; that seem to represent data entities of the system:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Highlighting terms in the requirements that correspond to data entities&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Two kinds of &lt;strong&gt;users&lt;/strong&gt;: library &lt;strong&gt;members&lt;/strong&gt; and &lt;strong&gt;librarians&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Users&lt;/strong&gt; log in to the system via email and password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Members can borrow &lt;strong&gt;books&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Members and librarians can search books by title or by &lt;strong&gt;author&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Librarians can block and unblock members (e.g. when they are late in returning a book)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Librarians can list the &lt;strong&gt;books currently lent&lt;/strong&gt; by a member&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There could be several &lt;strong&gt;copies of a book&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Data entities are the parts of your system that hold information&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Excellent. Can you see a natural way to group the entities?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; Not sure, but it seems to me that &lt;em&gt;users&lt;/em&gt;, &lt;em&gt;members&lt;/em&gt; and &lt;em&gt;librarians&lt;/em&gt; form a group while &lt;em&gt;books&lt;/em&gt;, &lt;em&gt;authors&lt;/em&gt; and &lt;em&gt;book copies&lt;/em&gt; form another group.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Sounds good to me. How would you call each group?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; &lt;strong&gt;User management&lt;/strong&gt; for the first group and &lt;strong&gt;Catalog&lt;/strong&gt; for the second group.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The data entities of the system organized in a nested list&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The catalog data&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data about books&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data about authors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data about book items&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data about book lendings&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user management data&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data about users&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data about members&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data about librarians&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; I am not sure about the relationships between books and authors: should it be association or composition?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Don&amp;#8217;t worry too much about the details for the moment. We will refine our data entities design later (Chapter 3). For now, let&amp;#8217;s visualize the two groups in a &lt;a href=&quot;#lms-data-sketch&quot;&gt;mindmap&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lms-data-sketch&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/data-book/uml/chapter02/lms-data.png&quot; alt=&quot;lms data&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. The data entities of the system organized in a mind map&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most precise way to visualize the data entities of a DO system is to draw a data entity diagram with different arrows for association and composition. We will come back to data entity diagram in Chapter 3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Discover the data entities of your system and group them into high level groups.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will get deeper into the design and the representation of data entities in Chapter 3. For now, let&amp;#8217;s simplify and say that the data of our library system is made of two high level groups: &lt;strong&gt;User Management&lt;/strong&gt; and &lt;strong&gt;Catalog&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;code-modules&quot; class=&quot;sect0&quot;&gt;Code modules&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second step of the design process in DO, is to define the &lt;strong&gt;code modules&lt;/strong&gt; of the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Now that you have identified the data entities of your system and group them into high level groups, it&amp;#8217;s time to think about the &lt;strong&gt;code part&lt;/strong&gt; of your system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; What do you mean by &lt;em&gt;code part&lt;/em&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; One way to think about it is to identity the &lt;strong&gt;functionalities of your system&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You look again at Nancy&amp;#8217;s requirement napkin and this time you highlight the &lt;strong&gt;verb phrases&lt;/strong&gt; that represent functionalities of the system:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Highlighting terms in the requirements that correspond to functionalities&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Two kinds of users: library members and librarians&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Users &lt;strong&gt;log into the system&lt;/strong&gt; via email and password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Members can &lt;strong&gt;borrow books&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Members and librarians can &lt;strong&gt;search books&lt;/strong&gt; by title or by author&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Librarians can &lt;strong&gt;block&lt;/strong&gt; and &lt;strong&gt;unblock members&lt;/strong&gt; (e.g. when they are late in returning a book)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Librarians can &lt;strong&gt;list the books currently lent by a member&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There could be several copies of a book&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to that, it is obvious that members can also return a book. Moreover, there should be a way to detect whether a user is a librarian or not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your write down a list of the functionalities of the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The functionalities of the system&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Search a book&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a book item&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Block a member&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unblock a member&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Login a user into the system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List the books currently lent by a member&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Borrow a book&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return a book&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check whether a user is a librarian&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Excellent! Now, tell me what functionalities need to be &lt;strong&gt;exposed to the outside world&lt;/strong&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; What do you mean by &lt;em&gt;exposed to the outside world_&lt;/em&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Imagine that the library management system were exposing an API over HTTP: what would be the endpoints of the API?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; I see. All the functionalities them beside checking if a user is a librarian should need to be exposed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Perfect, now give to each exposed functionality a short name and gather them together in a box called &lt;code&gt;Library&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you draw &lt;a href=&quot;#lib-mgmt-entry-points&quot;&gt;the exposed functions of the Library&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lib-mgmt-entry-points&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/data-book/uml/chapter02/entry-points-lms.png&quot; alt=&quot;entry points lms&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. The exposed functions of the Library management system&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step in designing the code part of a DO system is to aggregate the exposed functions in a single module.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Beautiful. You just created your first &lt;strong&gt;code module&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; To me it looks like a class: What&amp;#8217;s the difference between a &lt;em&gt;module&lt;/em&gt; and a &lt;em&gt;class&lt;/em&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; A &lt;strong&gt;module&lt;/strong&gt; is an aggregation of functions. In OO, a module is represented by a class but in other programming languages, it might be a &lt;em&gt;package&lt;/em&gt; or a &lt;em&gt;namespace&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU&lt;/strong&gt;: I see.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; The important thing about DO code modules is that they contain only &lt;strong&gt;stateless functions&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; You mean like &lt;strong&gt;static methods&lt;/strong&gt; in Java?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Exactly!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; So how the functions know on what piece of information they operate?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; We pass it as the first argument to the function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; I don&amp;#8217;t understand. Could you give me an example?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Joe takes a look at the &lt;a href=&quot;#lib-mgmt-entry-points&quot;&gt;list of functions&lt;/a&gt; of the &lt;code&gt;Library&lt;/code&gt; module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Let&amp;#8217;s take for example &lt;code&gt;getBookLendings()&lt;/code&gt;: in classic OO, what would be its arguments?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; The id of the librarian that wants to list the book lendings and the member id&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; In classic OO,  &lt;code&gt;getBookLendings&lt;/code&gt; would be a method of a &lt;code&gt;Library&lt;/code&gt; class that receives two arguments: &lt;code&gt;userId&lt;/code&gt; and &lt;code&gt;memberId&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; Yeap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Now comes the subtle part: in DO, &lt;code&gt;getBookLendings&lt;/code&gt; is part of the library module and it receives the
 &lt;code&gt;LibraryData&lt;/code&gt; as the first argument.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; Could you show me what you mean?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Sure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Joe gets closer to your keyboard and start typing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s how a class method looks like in OO:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-nx&quot;&gt;libraryData&lt;/span&gt; &lt;span class=&quot;tok-c1&quot;&gt;// state of the object&lt;/span&gt;

    &lt;span class=&quot;tok-nx&quot;&gt;getBookLendings&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-c1&quot;&gt;// accesses library data via this.libraryData&lt;/span&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The method accesses the &lt;strong&gt;state&lt;/strong&gt; of the object&amp;#8201;&amp;#8212;&amp;#8201;in our case the library data&amp;#8201;&amp;#8212;&amp;#8201; via &lt;code&gt;this.libraryData&lt;/code&gt;. The object&amp;#8217;s state is an &lt;strong&gt;implicit argument&lt;/strong&gt; to the object&amp;#8217;s methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In classic OO, the state of the object is an &lt;strong&gt;implicit argument&lt;/strong&gt; to the methods of the object.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DO, the signature of &lt;code&gt;getBookLendings&lt;/code&gt; would look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;getBookLendings&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;libraryData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;strong&gt;state&lt;/strong&gt; of the library is stored in &lt;code&gt;libraryData&lt;/code&gt; and it is passed to the &lt;code&gt;getBookLendings&lt;/code&gt; &lt;strong&gt;static&lt;/strong&gt; method as an &lt;strong&gt;explicit argument&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DO, functions of a code module are &lt;strong&gt;stateless&lt;/strong&gt;: they receive the &lt;strong&gt;state they manipulate&lt;/strong&gt; as an &lt;strong&gt;explicit argument&lt;/strong&gt;, usually the first argument.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;strong&gt;module&lt;/strong&gt; is an aggregation of functions. In DO, the module functions are &lt;strong&gt;stateless&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same rule applies to the other functions of the library module. All of them are stateless: they receive the library data as first argument.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You apply this rule and you refine the &lt;a href=&quot;#library-module-args&quot;&gt;design of the library module&lt;/a&gt; by including the details about functions' arguments.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;library-module-args&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/data-book/uml/chapter02/library-module-args.png&quot; alt=&quot;library module args&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. The Library module with the function arguments&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Perfect. We are now ready to design at a high level our system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; What&amp;#8217;s a &lt;strong&gt;high level design in DO&lt;/strong&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; The &lt;strong&gt;definition&lt;/strong&gt; of modules and the &lt;strong&gt;interaction&lt;/strong&gt; between them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; I see. Is there any guideline to help me define the modules?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Definitely. The &lt;strong&gt;high level modules&lt;/strong&gt; of the system correspond to the &lt;strong&gt;high level data entities&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; You mean the data entities that appear in the data mind map?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Exactly!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You look again at the &lt;a href=&quot;#lms-data-mindmap&quot;&gt;data mind map&lt;/a&gt; and you focus on the high level data entities: &lt;strong&gt;Library&lt;/strong&gt;, &lt;strong&gt;Catalog&lt;/strong&gt; and &lt;strong&gt;User management&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lms-data-mindmap&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/data-book/uml/chapter02/lms-data-high-level.png&quot; alt=&quot;lms data high level&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. A mindmap of high level data entities of the Library management system&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It means that in the system, beside, the &lt;code&gt;Library&lt;/code&gt; module, we have two high level modules:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Catalog&lt;/code&gt; module that deals with catalog data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UserManagement&lt;/code&gt; module that deals with user management data&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Code modules&lt;/strong&gt; correspond to the &lt;strong&gt;data entities&lt;/strong&gt; of the system.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you draw the &lt;a href=&quot;#lib-mgmt-entry-points-split-args&quot;&gt;high level design&lt;/a&gt; of library management system, where:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Functions of &lt;code&gt;Catalog&lt;/code&gt; receive &lt;code&gt;catalogData&lt;/code&gt; as first argument&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions of &lt;code&gt;UserManagement&lt;/code&gt; receive &lt;code&gt;userManagementData&lt;/code&gt; as first argument&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;lib-mgmt-entry-points-split-args&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/data-book/uml/chapter02/entry-points-split-args-lms.png&quot; alt=&quot;entry points split args lms&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. The modules of the Library management system with the function arguments&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It might not be totally clear for you at the moment, how the data entities get passed between modules. For the moment, you can think of &lt;code&gt;libraryData&lt;/code&gt; as a class with two members:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;catalog&lt;/code&gt; that holds the catalog data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;userManagement&lt;/code&gt; that holds the user management data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The functions of &lt;code&gt;Library&lt;/code&gt; share a common pattern:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;It receives &lt;code&gt;libraryData&lt;/code&gt; as an argument&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It passes &lt;code&gt;libraryData.catalog&lt;/code&gt; to functions of &lt;code&gt;Catalog&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It passes &lt;code&gt;libraryData.userManagement&lt;/code&gt; to functions of &lt;code&gt;UserManagement&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Later on, in this chapter, we will see code for some functions of the &lt;code&gt;Library&lt;/code&gt; module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The high level &lt;strong&gt;modules&lt;/strong&gt; of a DO system correspond to the high level &lt;strong&gt;data entities&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;h1 id=&quot;do-systems-are-easy-to-understand&quot; class=&quot;sect0&quot;&gt;DO systems are easy to understand&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You take a look at the two diagrams that represent the high level design of your system:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The data entities in the &lt;a href=&quot;#lms-data-mindmap-2&quot;&gt;data mind map&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The code modules in the &lt;a href=&quot;#lib-mgmt-entry-points-split-args-2&quot;&gt;module diagram&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A bit perplexed, you ask Joe:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; I am not sure that this system is better than a classic OO system, where &lt;strong&gt;objects encapsulate data&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; The main benefit of a DO system over a classic OO systems is that it is &lt;strong&gt;easier to understand&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; What makes it easier to understand?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; The fact that the system is split clearly in code modules and data entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; I don&amp;#8217;t get you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; When you try to understand the data entities of the system, you don&amp;#8217;t have to think about the details of the code that manipulates the data entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; You mean that when I look at the data mind map of my library management system, I am able to understand it on its own?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Exactly. And similarly, when you try to understand the code modules of the system, you don&amp;#8217;t have to think about the details of the data entities manipulated by the code. There is a clear &lt;strong&gt;separation of concerns&lt;/strong&gt; between the code and the data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You look again at the &lt;a href=&quot;#lms-data-mindmap-2&quot;&gt;data mind map&lt;/a&gt;, and you get kind of a Aha moment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Data lives on its own!&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&quot;lms-data-mindmap-2&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/data-book/uml/chapter02/lms-data.png&quot; alt=&quot;lms data&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 7. A data mindmap of the Library management system&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A DO system is easier to understand because the system is split in two parts: data entities and code modules.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you look at the &lt;a href=&quot;#lib-mgmt-entry-points-split-args-2&quot;&gt;module diagram&lt;/a&gt; and you feel a bit confused:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On one hand, the module diagram looks &lt;strong&gt;similar&lt;/strong&gt; to the class diagrams from &lt;strong&gt;classic OO&lt;/strong&gt;: boxes for classes and arrows for relations between classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the other hand, the code module diagram looks much &lt;strong&gt;simpler&lt;/strong&gt; than the class diagrams from &lt;strong&gt;classic OO&lt;/strong&gt;, but you cannot explain why.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You ask Joe for a clarification.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; The module diagram seems much simpler that the class diagrams I am used to in OO. I feel it but I cannot put words on it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; The reason is that module diagrams have &lt;strong&gt;constraints&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; What kind of constraints?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; &lt;strong&gt;Constraints on the functions&lt;/strong&gt; as we saw before: All the functions are static (stateless). But also &lt;strong&gt;constraints on the relations between the modules&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; Could you explain that?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; There is a single kind of relation between DO modules: the &lt;strong&gt;usage relation&lt;/strong&gt;. A module uses code from another module. No  &lt;strong&gt;association&lt;/strong&gt;, no &lt;strong&gt;composition&lt;/strong&gt; and no &lt;strong&gt;inheritance&lt;/strong&gt; between modules. That&amp;#8217;s what make a DO module diagram easy to understand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; I understand why there is no association and no composition between DO modules: after all, association and composition are &lt;strong&gt;data relations&lt;/strong&gt;. But why no &lt;strong&gt;inheritance&lt;/strong&gt; relation? Does it mean that in DO is against &lt;strong&gt;polymorphism&lt;/strong&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; That&amp;#8217;s a great question. The quick answer is that in DO, we achieve polymorphism with a different mechanism than class inheritance. We will talk about it later (in Chapter 5).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; Now, you triggered my curiosity: I was quite sure that inheritance was the only way to achieve polymorphism.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You look again at the &lt;a href=&quot;#lib-mgmt-entry-points-split-args-2&quot;&gt;module diagram&lt;/a&gt; and now you not only feel that this diagram is simpler than classic OO class diagrams, you understand why it is simpler: All the functions are static and all the relation between modules are of type usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lib-mgmt-entry-points-split-args-2&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/data-book/uml/chapter02/entry-points-split-args-lms.png&quot; alt=&quot;entry points split args lms&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 8. The modules of the Library management system with the function arguments&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. What makes each part of a DO system easy to understand&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;System part&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Constraint on entities&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Constraints on relations&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Data entities&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Members (no code)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Association and Composition&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Code modules&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Code (no members)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Usage (no inheritance)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each part of a DO system is easy to understand, because it has constraints.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;h1 id=&quot;do-systems-are-flexible&quot; class=&quot;sect0&quot;&gt;DO systems are flexible&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; I get that the sharp separation between code and data makes DO systems are easier to understand than classic OO systems. But what about adapting to changes in requirements?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Another benefit of DO systems is that it is &lt;strong&gt;easy to adapt&lt;/strong&gt; them to changing requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; I remember that when Nancy asked me to add &lt;em&gt;Super Members&lt;/em&gt; and &lt;em&gt;VIP Members&lt;/em&gt; to the system, it was hard to adapt my OO system: I had to introduce a few base classes and the &lt;strong&gt;class hierarchy became really complex&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; I know exactly what you are talking about. I experienced the same kind of struggle when I was a OO developer. Tell me what were the changes in the requirements for &lt;em&gt;Super Members&lt;/em&gt; and &lt;em&gt;VIP Members&lt;/em&gt; and I am quite sure that you will see by yourself that it is easy to adapt your DO system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The requirements for Super Members and VIP Members&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Super Members&lt;/strong&gt; are members that are allowed to &lt;strong&gt;list the book lendings&lt;/strong&gt; of other members&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;VIP Members&lt;/strong&gt; are members that are allowed to &lt;strong&gt;add book items&lt;/strong&gt; to the library&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You open your IDE and you start to code the &lt;code&gt;getBookLendings&lt;/code&gt; function of the Library module, first without addressing the requirements for Super Members. You remember what Joe told you about module functions in DO:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Functions are &lt;strong&gt;stateless&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions receive the &lt;strong&gt;data&lt;/strong&gt; they manipulate as &lt;strong&gt;first argument&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In terms of functionalities, &lt;code&gt;getBookLendings&lt;/code&gt; have two parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Check that the user is a librarian&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Retrieve the book lendings from the catalog&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Basically, the code of &lt;code&gt;getBookLendings&lt;/code&gt; have two parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Call &lt;code&gt;isLibrarian&lt;/code&gt; function from the &lt;code&gt;UserManagement&lt;/code&gt; module and pass it the &lt;code&gt;UserManagementData&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Call &lt;code&gt;getBookLendings&lt;/code&gt; function from the &lt;code&gt;Catalog&lt;/code&gt; module and pass it the &lt;code&gt;CatalogData&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code for &lt;code&gt;Library.getBookLendings&lt;/code&gt; is shown in &lt;a href=&quot;#get-book-lendings-lib&quot;&gt;this listing&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;get-book-lendings-lib&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Getting the book lendings of a member&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;getBookLendings&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;libraryData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;UserManagement&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;isLibrarian&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;libraryData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;userManagement&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;tok-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;Catalog&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;getBookLendings&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;libraryData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;tok-k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;tok-k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;Not allowed to get book lendings&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;;&lt;/span&gt; // &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
        &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;tok-kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;UserManagement&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;isLibrarian&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;userManagementData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-c1&quot;&gt;// will be implemented later &lt;/span&gt;&lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;tok-kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;Catalog&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;getBookLendings&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;catalogData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-c1&quot;&gt;// will be implemented later &lt;/span&gt;&lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are other ways to manage errors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Chapter 3, we will see how to manage permissions with generic data collections&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Chapter 3, we will see how to query data with generic data collections&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s your first piece of DO code: passing around all those data objects &lt;code&gt;libraryData&lt;/code&gt;, &lt;code&gt;libraryData.userManagement&lt;/code&gt; and &lt;code&gt;libraryData.catalog&lt;/code&gt; feels a bit awkward. But you made it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Joe looks at your code and seems satisfied.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; How would you adapt your code to adapt to Super Members?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; I would add a function &lt;code&gt;isSuperMember&lt;/code&gt; to the &lt;code&gt;UserManagement&lt;/code&gt; module and call it from &lt;code&gt;Library.getBookLendings&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Exactly! It&amp;#8217;s as simple as that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You type this &lt;a href=&quot;#get-book-lendings-super&quot;&gt;piece of code&lt;/a&gt; on your laptop.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;get-book-lendings-super&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Allowing Super Members to get the book lendings of a member&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;getBookLendings&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;libraryData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;Usermanagement&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;isLibrarian&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;libraryData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;userManagement&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;||&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;           &lt;span class=&quot;tok-nx&quot;&gt;Usermanagement&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;isSuperMember&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;libraryData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;userManagement&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;            &lt;span class=&quot;tok-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;Catalog&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;getBookLendings&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;libraryData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;tok-k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;tok-k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;Not allowed to get book lendings&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;;&lt;/span&gt; // &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
        &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;tok-kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;UserManagement&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;isLibrarian&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;userManagementData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-c1&quot;&gt;// will be implemented later &lt;/span&gt;&lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;    &lt;span class=&quot;tok-kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;isSuperMember&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;userManagementData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;        &lt;span class=&quot;tok-c1&quot;&gt;// will be implemented later &lt;/span&gt;&lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;tok-kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;Catalog&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;getBookLendings&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;catalogData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-c1&quot;&gt;// will be implemented later &lt;/span&gt;&lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are other ways to manage errors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Chapter 3, we will see how to manage permissions with generic data collections&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Chapter 3, we will see how to query data with generic data collections&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, the awkward feeling caused by passing around all those data objects is dominated by a feeling of relief: Adapting to this change in requirement takes only a few lines of code and require &lt;strong&gt;no changes in the system design&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once again, Joe seems satisfied.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DO systems are &lt;strong&gt;flexible&lt;/strong&gt;. Quite often, they adapt to changing requirements &lt;strong&gt;without changing the system design&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You prepare yourself a cup of coffee, and you start coding the &lt;code&gt;addBookItem&lt;/code&gt; code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You look at the &lt;a href=&quot;#add-book-item-signature&quot;&gt;signature of &lt;code&gt;Library.addBookItem&lt;/code&gt;&lt;/a&gt; and it is not clear to you what is the meaning of the third argument &lt;code&gt;bookItemInfo&lt;/code&gt;. You ask Joe for a clarification.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;add-book-item-signature&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The signature of &lt;code&gt;Library.addBookItem&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;addBookItem&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;libraryData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;bookItemInfo&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; What is &lt;code&gt;booItemInfo&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Letâ€™s call it the book item information and imagine we have a way to &lt;strong&gt;represent this information&lt;/strong&gt; in a &lt;strong&gt;data entity&lt;/strong&gt; named &lt;code&gt;bookItemInfo&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; You mean an object?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; For now, itâ€™s ok to think about &lt;code&gt;bookItemInfo&lt;/code&gt; as on object. Later on (in Chapter 3), I will
show you how to &lt;strong&gt;represent data entities&lt;/strong&gt; as &lt;strong&gt;generic data collections&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Beside this subtlety about how the book item info is represented by &lt;code&gt;bookItemInfo&lt;/code&gt;, the &lt;a href=&quot;#add-book-item-lib&quot;&gt;code for &lt;code&gt;Library.addBookItem&lt;/code&gt;&lt;/a&gt; is quite similar to &lt;a href=&quot;#get-book-lendings-super&quot;&gt;the code you wrote for &lt;code&gt;Library.getBookLendings&lt;/code&gt;&lt;/a&gt;. Once again, you are amazed by the fact that adding support for VIP Members requires &lt;strong&gt;no design change&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;add-book-item-lib&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Allowing VIP Members to add a book item to the library&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;addBookItem&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;libraryData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;bookItemData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;UserManagement&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;isLibrarian&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;libraryData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;userManagement&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;||&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;           &lt;span class=&quot;tok-nx&quot;&gt;UserManagement&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;isVIPMember&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;libraryData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;userManagement&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;            &lt;span class=&quot;tok-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;Catalog&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;addBookItem&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;libraryData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;bookItemData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;tok-k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;tok-k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;Not allowed to add a book item&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;;&lt;/span&gt; // &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
        &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;tok-kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;UserManagement&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;isLibrarian&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;userManagementData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-c1&quot;&gt;// will be implemented later &lt;/span&gt;&lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;    &lt;span class=&quot;tok-kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;isVIPMember&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;userManagementData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;        &lt;span class=&quot;tok-c1&quot;&gt;// will be implemented later &lt;/span&gt;&lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;tok-kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;Catalog&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;addBookItem&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;catalogData&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-c1&quot;&gt;// will be implemented later &lt;/span&gt;&lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are other ways to manage errors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Chapter 3, we will see how to manage permissions with generic data collections&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Chapter 4, we will see how to manage state of the system with immutable data&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; It required a big &lt;strong&gt;mindset shift&lt;/strong&gt; for me to learn how to separate code from data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; What was the most challenging part for your mind?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; The fact that data is not encapsulated in objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; It was the same for me when I switched from OO to DO.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; Will there be other mindset shifts in my journey into DO?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; There will be two more mindset shifts but I think that they will be less challenging than separating code from data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;YOU:&lt;/strong&gt; What will it be about?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JOE:&lt;/strong&gt; Representing data entities as &lt;strong&gt;generic collections&lt;/strong&gt; (Chapter 3) and constraining ourselves to &lt;strong&gt;immutable data objects&lt;/strong&gt; (Chapter 4).&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;wrapping-up&quot; class=&quot;sect0&quot;&gt;Wrapping up&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this chapter we illustrated DO Principle #1 about the separation between code from data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Principle #1: Separate &lt;strong&gt;code&lt;/strong&gt; from &lt;strong&gt;data&lt;/strong&gt; in a way that the &lt;strong&gt;code&lt;/strong&gt; resides in functions whose behavior does not depend on &lt;strong&gt;data&lt;/strong&gt; that is somehow encapsulated in the function&amp;#8217;s context.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It required quite a big mindset shift to learn that in DO:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Code is &lt;strong&gt;separated&lt;/strong&gt; from data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code is aggregated in &lt;strong&gt;modules&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data is aggregated in &lt;strong&gt;data entities&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code is made of &lt;strong&gt;stateless&lt;/strong&gt; functions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions receive &lt;strong&gt;data as first argument&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We illustrated how to apply this principle in a OO language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A consequence of this separation is that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We have the &lt;strong&gt;freedom&lt;/strong&gt; to design code and data in isolation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Module diagrams are &lt;strong&gt;simple&lt;/strong&gt;: it&amp;#8217;s only about usage (no inheritance)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data entities diagram are &lt;strong&gt;simple&lt;/strong&gt;: it&amp;#8217;s only about association and composition&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The details of Principle #1 are summarized in &lt;a href=&quot;#princuple1-mindmap&quot;&gt;this mindmap&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall, the DO systems are &lt;strong&gt;simpler&lt;/strong&gt; (easier to understand) than classic OO systems and &lt;strong&gt;more flexible&lt;/strong&gt; (easier to adapt to changing requirements).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;princuple1-mindmap&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/data-book/uml/chapter02/principle1-mindmap.png&quot; alt=&quot;principle1 mindmap&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 9. The summary of Principle #1: Separate code from data&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;oh-my-love&quot; class=&quot;sect0&quot;&gt;Oh my love&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What follows is an adaptation of &lt;a href=&quot;https://en.wikipedia.org/wiki/Oh_My_Love&quot;&gt;Oh My Love&lt;/a&gt; by John Lennon and Yoko Ono.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Oh my love for the first time in my life&lt;br&gt;
My &lt;strong&gt;system&lt;/strong&gt; is &lt;strong&gt;quite simple&lt;/strong&gt;&lt;br&gt;
Oh my lover for the first time in my life&lt;br&gt;
My &lt;strong&gt;system&lt;/strong&gt; can adapt&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I see the &lt;strong&gt;code&lt;/strong&gt;, oh I see the &lt;strong&gt;data&lt;/strong&gt;&lt;br&gt;
Everything is clear in my heart&lt;br&gt;
I see the &lt;strong&gt;code&lt;/strong&gt;, oh I see the &lt;strong&gt;data&lt;/strong&gt;&lt;br&gt;
Everything is clear in my &lt;strong&gt;system&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Oh my love for the first time in my life&lt;br&gt;
My &lt;strong&gt;entities&lt;/strong&gt; are &lt;strong&gt;quite simple&lt;/strong&gt;&lt;br&gt;
Oh my lover for the first time in my life&lt;br&gt;
My &lt;strong&gt;modules&lt;/strong&gt; can adapt&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I feel the &lt;strong&gt;arguments&lt;/strong&gt;, oh I feel the dreams&lt;br&gt;
Everything is &lt;strong&gt;stateless&lt;/strong&gt; in my &lt;strong&gt;code&lt;/strong&gt;&lt;br&gt;
I feel life, oh I feel love&lt;br&gt;
Everything is clear in my &lt;strong&gt;system&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published.</summary></entry><entry><title type="html">Clojure and EDN diff tool</title><link href="https://blog.klipse.tech//clojure/2020/10/08/edn-diff.html" rel="alternate" type="text/html" title="Clojure and EDN diff tool" /><published>2020-10-08T05:21:22+00:00</published><updated>2020-10-08T05:21:22+00:00</updated><id>https://blog.klipse.tech//clojure/2020/10/08/edn-diff</id><content type="html" xml:base="https://blog.klipse.tech//clojure/2020/10/08/edn-diff.html">&lt;p&gt;Compare recursively two Clojure data structures &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Comparison is updated as you typeâ€¦&lt;/p&gt;

&lt;pre class=&quot;hidden&quot;&gt;&lt;code class=&quot;language-klipse&quot;&gt;
(require '[clojure.data :refer [diff]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(def a {:only-in-a 1
        :both-in-a-and-b 3}) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(def b {:only-in-b 2
        :both-in-a-and-b 3}) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Full comparison:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(def full-comparison (clojure.data/diff a b)) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things only in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(first full-comparison)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things only in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(second full-comparison)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things in both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(last full-comparison)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comparison rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For equal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;, return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[nil nil a]&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Maps are subdiffed where keys match and values differ.&lt;/li&gt;
  &lt;li&gt;Sets are never subdiffed.&lt;/li&gt;
  &lt;li&gt;All sequential things are treated as associative collections by their indexes, with results returned as vectors.&lt;/li&gt;
  &lt;li&gt;Everything else (including strings!) is treated as an atom and compared for equality.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explore more examples on &lt;a href=&quot;https://clojuredocs.org/clojure.data/diff&quot;&gt;ClojureDocs&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yehonathan Sharvit</name></author><summary type="html">Compare recursively two Clojure data structures a and b.</summary></entry><entry><title type="html">DO Principle #5: Data has a literal representation</title><link href="https://blog.klipse.tech//databook/2020/10/03/data-literal.html" rel="alternate" type="text/html" title="DO Principle #5: Data has a literal representation" /><published>2020-10-03T18:31:24+00:00</published><updated>2020-10-03T18:31:24+00:00</updated><id>https://blog.klipse.tech//databook/2020/10/03/data-literal</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/10/03/data-literal.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Data Oriented programming data is a first class citizen that is considered as a value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It comes down to 3 principles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Principle #3: Data is immutable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/data-comparable-value.html&quot;&gt;Principle #4: Data is comparable by value&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/03/data-literal.html&quot;&gt;Principle #5: Data has a literal representation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we explore Principle #5.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-principle-in-a-nutshell&quot;&gt;The principle in a nutshell&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Principle #5: Data can be represented by literals.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;remarks-on-principle-5&quot;&gt;Remarks on Principle #5&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Principle #5 is in fact made of two parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;It is possible to display the content of any data collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A data collection can be instantiated via a literal.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;illustration-of-principle-5&quot;&gt;Illustration of Principle #5&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Principle #5 is in fact made of two parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;It is possible to display the content of any data collection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A data collection can be instantiated via a literal&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A language like JavaScript adheres to both parts of Principle #5.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Part 1 is satisfied because any data collection could be serialized to a JSON string.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Part 2 is satisfied because we can instantiate maps and arrays via literals&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a language like Java or C#, where the only way to instantiate a data collection is via class constructors and setters, it is not possible to adhere to the second part of Principle #5.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-principle-5&quot;&gt;Benefits of Principle #5&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we choose a language that support data representation via literals, we benefit from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data creation is not verbose&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data is explorable in any context&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-1-data-creation-is-not-verbose&quot;&gt;Benefit #1: Data creation is not verbose&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s illustrate how much verbosity is involved in data creation via class constructors and setters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data = new Object();
data.firstName = &amp;quot;Isaac&amp;quot;;
data.lastName = &amp;quot;Asimov&amp;quot;;
data&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And it is even worse when the map is nested, as we have to explicitly create empty maps for intermediate levels of nesting:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data = new Object();
data.firstName = &amp;quot;Isaac&amp;quot;;
data.lastName = &amp;quot;Asimov&amp;quot;;
data.details = new Object();
data.details.yearOfBirth = 1920;
data.details.yearOfDeath = 1992;
data;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, data creation via literals is compact and clear:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data = {
  &amp;quot;firstName&amp;quot;: &amp;quot;Isaac&amp;quot;,
  &amp;quot;lastName&amp;quot;: &amp;quot;Asimov&amp;quot;,
  &amp;quot;details&amp;quot;: {
    &amp;quot;yearOfBirth&amp;quot;: 1920,
    &amp;quot;yearOfDeath&amp;quot;: 1992
  }
}
data;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-2-data-is-explorable-in-any-context&quot;&gt;Benefit #2: Data is explorable in any context&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a program that adhere to DO principles, it is quite common to display data to the console or to log files.
No special effort is required for that. We simply call a printing function and our data is automatically converted to a string.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we combine Benefit #1 and #2 together we are able to open a log file, copy from it a piece of data, paste it in our source code as a data literal and boom, our data is instantiated!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;price-for-principle-5&quot;&gt;Price for Principle #5&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are no free meals. The privilege of being able to represent data with literals comes at a price:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dangerous when the data is big&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confusion when part of the data is not data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-1-dangerous-when-the-data-is-big&quot;&gt;Price #1: Dangerous when the data is big&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is so convenient to print data to log files that we sometimes omit to check that the data is not too big and it causes our log files to grow beyond expectations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a language like Clojure, it is possible to control the maximal length of the printing functions via a dynamic variable which mitigates the risk for huge log files.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-3-confusion-when-part-of-the-data-is-not-data&quot;&gt;Price #3: Confusion when part of the data is not data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It might occur that we store a value in a map that is not data, for instance a function in JavaScript:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var mapWithFunction = {
  &amp;quot;firstName&amp;quot;: &amp;quot;Isaac&amp;quot;,
  &amp;quot;lastName&amp;quot;: &amp;quot;Asimov&amp;quot;,
  &amp;quot;foo&amp;quot;: function (x) { return x;}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The value associated to &lt;code&gt;foo&lt;/code&gt; is not data: it is a function. Functions are not serializable to JSON. Therefore, by default when we serialize &lt;code&gt;mapWithFunction&lt;/code&gt;, the &lt;code&gt;foo&lt;/code&gt; field is omitted from the serialized string:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;JSON.stringify(mapWithFunction);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On one hand it makes sense. On the other hand it might be confusing in some situations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, a confusion could occur if we stringify &lt;code&gt;mapWithFunction&lt;/code&gt; then parse it back and count the number of keys in the resulting objects.
We might be confused by the fact that &lt;code&gt;mapWithFunction&lt;/code&gt; has 3 keys while after a round trip, we are left with two keys:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;Object.keys(JSON.parse(JSON.stringify(mapWithFunction))).length;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We conclude our exploration of the principles of Data Oriented programming with the principle that says that data (like numbers and strings) should be representable by literals. That is the cherry on the cake if you want. This cherry is indeed very tasty but it is not available in every programming language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you adhere to all the principles of DO beside this one, I am willing to make an exception and give you a DO certificate&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published.</summary></entry><entry><title type="html">DO Principle #4: Data is comparable by value</title><link href="https://blog.klipse.tech//databook/2020/10/02/data-comparable-value.html" rel="alternate" type="text/html" title="DO Principle #4: Data is comparable by value" /><published>2020-10-02T17:31:24+00:00</published><updated>2020-10-02T17:31:24+00:00</updated><id>https://blog.klipse.tech//databook/2020/10/02/data-comparable-value</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/10/02/data-comparable-value.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/immutable/3.8.2/immutable.min.js&quot; integrity=&quot;sha512-myCdDiGJRYrvRb/VuJ67ljifYTJdc1jdEvL4c4ftX9o3N6EAnmD83c/7l2/91RCINZ7c8w21tiXDT7RDFjdc3g==&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Data Oriented programming data is a first class citizen that is considered as a value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It comes down to 3 principles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Principle #3: Data is immutable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/data-comparable-value.html&quot;&gt;Principle #4: Data is comparable by value&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/03/data-literal.html&quot;&gt;Principle #5: Data has a literal representation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we explore Principle #4.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-principle-in-a-nutshell&quot;&gt;The principle in a nutshell&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Principle #4: Data collections are considered to be equal if they represent the same collection of values.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;remarks-on-principle-4&quot;&gt;Remarks on Principle #4&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Definition of equality in Computer Science is a deep topic. We are only scratching the surface here&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are not dealing here with the comparison of data collection of different types (e.g. lists and vectors)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are not dealing only with equality of primitive types&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;illustration-of-principle-4&quot;&gt;Illustration of Principle #4&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In concrete terms, Principle #4 says that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Two arrays with same elements are considered to be equal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two maps with the same keys and values are considered to be equal&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This definition is in fact a recursive definition because the elements of an array and the values of a map could themselves be arrays and maps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In native JavaScript, this principle is broken both for arrays and maps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var a = [1];
var b = [1];
a === b;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var a = {username: &amp;quot;foo&amp;quot;};
var b = {username: &amp;quot;foo&amp;quot;};
a === b;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to compare data by value, one needs a custom equality function like the &lt;code&gt;is&lt;/code&gt; function provided by
  &lt;a href=&quot;https://immutable-js.github.io/immutable-js&quot;&gt;Immutable.js&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var a = Immutable.List([1]);
var b = Immutable.List([1]);
Immutable.is(a, b);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var a = Immutable.Map({username: &amp;quot;foo&amp;quot;});
var b = Immutable.Map({username: &amp;quot;foo&amp;quot;});
Immutable.is(a, b);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-principle-4&quot;&gt;Benefits of Principle #4&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we compare data by value across the board, our programs benefit from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Writing unit tests is a pleasure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maps with data keys&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-1-writing-unit-tests-is-a-pleasure&quot;&gt;Benefit #1: Writing unit tests is a pleasure&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When data equality is defined by value, we can specify the expected return value of a function as data instead of having to check each value separately.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s write a &quot;unit test&quot; for a function that returns a (immutable) map with the full name of an author&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is the code for &lt;code&gt;addFullName&lt;/code&gt;, using the &lt;code&gt;set&lt;/code&gt; function from Immutable.js as we showed in &lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Principle #3: Data is immutable&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function addFullName(data) {
  return data.set(&amp;quot;fullName&amp;quot;,
                  data.get(&amp;#39;firstName&amp;#39;) + &amp;quot; &amp;quot; + data.get(&amp;#39;lastName&amp;#39;));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to write a unit test for &lt;code&gt;addFullName&lt;/code&gt; without equality by value, we would need to check each field separately:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var isaac = Immutable.Map({firstName: &amp;quot;Isaac&amp;quot;, lastName: &amp;quot;Asimov&amp;quot;});
var enrichedIsaac = addFullName(isaac);
enrichedIsaac.get(&amp;quot;firstName&amp;quot;) === &amp;quot;Isaac&amp;quot; &amp;amp;&amp;amp;
  enrichedIsaac.get(&amp;quot;lastName&amp;quot;) === &amp;quot;Asimov&amp;quot; &amp;amp;&amp;amp;
  enrichedIsaac.get(&amp;quot;fullName&amp;quot;) === &amp;quot;Isaac Asimov&amp;quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With equality by value, using &lt;code&gt;Immutable.is&lt;/code&gt; from Immutable.js, the unit test becomes much clearer
as we are able to simply specify what is the expected output of our function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var isaac = Immutable.Map({firstName: &amp;quot;Isaac&amp;quot;, lastName: &amp;quot;Asimov&amp;quot;});
var enrichedIsaac = addFullName(isaac);
Immutable.is(enrichedIsaac, Immutable.Map({firstName: &amp;quot;Isaac&amp;quot;,
                                           lastName: &amp;quot;Asimov&amp;quot;,
                                           fullName: &amp;quot;Isaac Asimov&amp;quot;}))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-2-maps-with-data-keys&quot;&gt;Benefit #2: Maps with data keys&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The behavior of a map data structure is connected deeply with the definition of &lt;strong&gt;equality&lt;/strong&gt; of the map keys. When we look for the value associated to key &lt;code&gt;a&lt;/code&gt; in a map &lt;code&gt;m&lt;/code&gt; what we really means is to find an entry in the map whose key is &lt;strong&gt;equal&lt;/strong&gt; to &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In many situations, the keys of the maps are strings and strings are compared by value. But what happens when we allow keys to be maps?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In JavaScript, when map keys are maps, we could have two different entries in the map with the &quot;same&quot; key:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var myMap = new Map;
var myData = {&amp;quot;foo&amp;quot;: 1};
var yourData = {&amp;quot;foo&amp;quot;: 1};

myMap.set(myData, 42);
myMap.set(yourData, 43);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reason is that JavaScript doesn&amp;#8217;t adhere to Principle #4.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we use a library that adheres to Principle #4, like Immutable.js, this weird situation doesn&amp;#8217;t occur:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var myMap = Immutable.Map({});
var myData = Immutable.Map({&amp;quot;foo&amp;quot;: 1});
var yourData = Immutable.Map({&amp;quot;foo&amp;quot;: 1});

myMap.set(myData, 42);
myMap.set(yourData, 43);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;price-for-principle-4&quot;&gt;Price for Principle #4&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are no free meals. Applying Principle #4 comes at a price:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No native support&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-1-no-native-support&quot;&gt;Price #1: No native support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Clojure, equality is defined by value in compliance with Principle #4.
However, on most programming languages, equality is defined by reference and not by value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to adhere to Principle #4, we must careful to never use the native equality check to compare data collections.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DO considers data as a value. As consequence, data should be compared by value either when we explicitly check if two pieces of data are equal or implicitly as a data key in a map. In most languages, we need a third party library to provide this value based equality check.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Continue your exploration of &lt;a href=&quot;/databook/2020/09/29/do-principles.html&quot;&gt;Data Oriented Programming principles&lt;/a&gt; and move to &lt;a href=&quot;/databook/2020/10/03/data-literal.html&quot;&gt;Data has a literal representation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html"></summary></entry><entry><title type="html">DO Principle #2: Model entities with generic data structures</title><link href="https://blog.klipse.tech//databook/2020/10/02/generic-data-structures.html" rel="alternate" type="text/html" title="DO Principle #2: Model entities with generic data structures" /><published>2020-10-02T09:31:24+00:00</published><updated>2020-10-02T09:31:24+00:00</updated><id>https://blog.klipse.tech//databook/2020/10/02/generic-data-structures</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/10/02/generic-data-structures.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js&quot; integrity=&quot;sha512-90vH1Z83AJY9DmlWa8WkjkV79yfS2n2Oxhsi2dZbIv0nC4E6m5AbH8Nh156kkM7JePmqD6tcZsfad1ueoaovww==&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-principle-in-a-nutshell&quot;&gt;The principle in a nutshell&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Principle #2: Model the data part of the entities of your application using generic data structures (mostly maps and arrays).
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;remarks-on-principle-2&quot;&gt;Remarks on Principle #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s optional to specify or not the shape of the data of an entity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FP Languages that are statically typed (e.g. Haskell and Ocaml) are not compliant with this principle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The most common data structures are maps (a.k.a dictionaries) and arrays. Other data structures: sets, lists and queues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Principle #2 doesn&amp;#8217;t deal with the mutability or the immutability of the data. This is the theme of &lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Principle #3: Data is immutable&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;illustration-of-principle-2&quot;&gt;Illustration of Principle #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to &lt;a href=&quot;/databook/2020/10/02/separate-code-data.html&quot;&gt;Principle #1: Separate code from data&lt;/a&gt;, we have to separate code and data. The theme of Principle #2 is about the programming constructs that we should use to model our data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DO, we model our data with generic data structures (like maps and arrays) instead of specific classes. Most of the data entities that appear in a typical application could be modeled with maps and arrays.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s look at the same simplistic example as the one used to illustrate &lt;a href=&quot;/databook/2020/10/02/separate-code-data.html&quot;&gt;Principle #1&lt;/a&gt;: the data that represents and author.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An author is a data entity with a &lt;code&gt;firstName&lt;/code&gt;, a &lt;code&gt;lastName&lt;/code&gt; and a number of &lt;code&gt;books&lt;/code&gt; he/she wrote.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We break this principle when we use classes to represent an author, like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;class AuthorData {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are compliant with this principle when we use a map (which is a generic data structure) to represent an author:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function createAuthorData(firstName, lastName, books) {
 var data = new Object;
 data.firstName = firstName;
 data.lastName = lastName;
 data.books = books;
return data;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a language like JavaScript, a map could be instantiated also via literals, which is a bit more convenient:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function createAuthorData(firstName, lastName, books) {
   return {firstName: firstName, lastName: lastName, books: books};
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-principle-2&quot;&gt;Benefits of Principle #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we use generic data structures to represent our data, our programs benefit from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Leverage functions that are not limited to our specific use case&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flexible data model&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;leverage-functions-that-are-not-limited-to-our-specific-use-case&quot;&gt;Leverage functions that are not limited to our specific use case&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a famous quote by Alan Perlis that summarizes this benefit very well:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Alan Perlis
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we use generic data structures to represent entities, we have the privilege to manipulate the entities with the rich set of functions available on maps natively in our programming language in addition to the ones provided by third party libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, JavaScript natively provides some basic functions on objects and
third party libraries like &lt;a href=&quot;https://lodash.com/&quot;&gt;lodash&lt;/a&gt; extend the functionality with even more functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an example, when an author is represented as a map, we can serialize it into JSON for free, using &lt;code&gt;JSON.stringify&lt;/code&gt; which is part of JavaScript:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data = createAuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500);
JSON.stringify(data);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And if we want to serialize the author data without the number of books,
we can use lodash&amp;#8217;s &lt;code&gt;pick&lt;/code&gt; function to create an object with a subset of keys:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data = createAuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500);
var dataWithoutBooks = _.pick(data, [&amp;#39;firstName&amp;#39;, &amp;#39;lastName&amp;#39;]);
JSON.stringify(dataWithoutBooks);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you adhere to Principle #2, all this wealth of functionalities is available to manipulate all your entities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;flexible-data-model&quot;&gt;Flexible data model&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we use generic data structures, our data model is flexible in the sense that our data is not forced to adhere to a specific shape. We are free to create data with no predefined shape. And we are free to modify the shape of our data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In classical OO, each piece of data is instantiated via a class.
As a consequence, even when a slightly different data shape is needed, we have to define a new class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Take for example a class &lt;code&gt;AuthorData&lt;/code&gt; that represent an author entity that made of 3 fields:
&lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt; and &lt;code&gt;books&lt;/code&gt;. Suppose that you want to add a field &lt;code&gt;fullName&lt;/code&gt; with the full name of the author.
In OO, you would have to define a new class &lt;code&gt;AuthorDataWithFullName&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However in DO, you are free to add (or remove) fields to a map &quot;on the fly&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data = createAuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500);
data.fullName = &amp;quot;Isaac Asimov&amp;quot;;
data&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;price-for-principle-2&quot;&gt;Price for Principle #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are no free meals. Applying Principle #2 comes at a price.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The price we have to pay when we mode entities with generic data structures is that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Performance hit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data shape needs to be documented manually&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No compile time check that the data is valid&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-1-performance-hit&quot;&gt;Price #1: Performance hit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we use specific classes to instantiate data, retrieving the value of a class member is super fast. The reason is that the compiler knows upfront how the data is going to look like and it can do all kinds of optimizations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, when we use generic data structures to store data, the data structure is optimized for the general case, like retrieving an arbitrary key from a map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Retrieving an arbitrary key from a map is slower than retrieving the value of a class member.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly setting an arbitrary key to a value is slower that setting the valued of a class member.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Usually, this performance hit is not significant, but it is something to keep in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-2-data-shape-needs-to-be-documented-manually&quot;&gt;Price #2: Data shape needs to be documented manually&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When an object is instantiated from a class, the information of the data shape is in the class definition.
It is helpful for developers and for IDEs (think about auto-completion features).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we use generic data structures to store data, the shape of the data needs to be documented manually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even when we are disciplined enough and we document our code,
it may occur that we modify slightly the shape of an entity and we forget to update the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In that case, we have to explore the code in order to figure out what is the real shape of our data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-3-no-compile-time-check-that-the-data-is-valid&quot;&gt;Price #3: No compile time check that the data is valid&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Take a look again at the &lt;code&gt;fullName&lt;/code&gt; function that we created during our exploration of &lt;a href=&quot;/databook/2020/10/02/separate-code-data.html&quot;&gt;Principle #1&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;
function fullName(data) {
   return data.firstName + &amp;quot; &amp;quot; + data.lastName;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we pass to &lt;code&gt;fullName&lt;/code&gt; a piece of data that doesn&amp;#8217;t conform to the shape &lt;code&gt;fullName&lt;/code&gt; expects, an error occurs at runtime.
For example, we could mistype the field that stores the first name (&lt;code&gt;fistName&lt;/code&gt; instead of &lt;code&gt;firstName&lt;/code&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;fullName({fistName: &amp;quot;Issac&amp;quot;, lastName: &amp;quot;Asimov&amp;quot;})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When data is instantiated only via classes, this type of error is caught at compile time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DO guides us to use generic data structures to model our entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we adhere to this principle, it allows us to manipulate the entities with generic functions (provided by the language and by third party libraries)
and it keeps our data model flexible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This flexibility causes a (small) performance hit and forces us to document manually the shape of our data as we cannot rely on the compiler to statically validate it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Continue your exploration of &lt;a href=&quot;/databook/2020/09/29/do-principles.html&quot;&gt;Data Oriented Programming principles&lt;/a&gt; and move to &lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Principle #3: Data is immutable&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html"></summary></entry><entry><title type="html">DO Principle #3: Data is immutable</title><link href="https://blog.klipse.tech//databook/2020/10/02/immutable-data.html" rel="alternate" type="text/html" title="DO Principle #3: Data is immutable" /><published>2020-10-02T09:31:24+00:00</published><updated>2020-10-02T09:31:24+00:00</updated><id>https://blog.klipse.tech//databook/2020/10/02/immutable-data</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/10/02/immutable-data.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/immutable/3.8.2/immutable.min.js&quot; integrity=&quot;sha512-myCdDiGJRYrvRb/VuJ67ljifYTJdc1jdEvL4c4ftX9o3N6EAnmD83c/7l2/91RCINZ7c8w21tiXDT7RDFjdc3g==&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Data Oriented programming data is a first class citizen that is considered as a value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It comes down to 3 principles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Principle #3: Data is immutable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/data-comparable-value.html&quot;&gt;Principle #4: Data is comparable by value&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/03/data-literal.html&quot;&gt;Principle #5: Data has a literal representation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we explore Principle #3.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-principle-in-a-nutshell&quot;&gt;The principle in a nutshell&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Principle #3: Data never changes.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;remarks-on-principle-3&quot;&gt;Remarks on Principle #3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data never changes, but we have the possibility to create a new version of the data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are allowed to change the reference of a variable, so that it refers to a new version of the data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;illustration-of-principle-3&quot;&gt;Illustration of Principle #3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Think about the number &lt;code&gt;42&lt;/code&gt;. What happens to &lt;code&gt;42&lt;/code&gt; when you add &lt;code&gt;1&lt;/code&gt; to it? Does it become &lt;code&gt;43&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No! &lt;code&gt;42&lt;/code&gt; stays &lt;code&gt;42&lt;/code&gt; forever!!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now put &lt;code&gt;42&lt;/code&gt; inside an object &lt;code&gt;{num: 42}&lt;/code&gt;. What happens to the object when you add &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;42&lt;/code&gt;? Does it become &lt;code&gt;43&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It depends on the programming language. In Clojure, a programming language that embraces data immutability,  &lt;code&gt;42&lt;/code&gt; stays &lt;code&gt;42&lt;/code&gt; forever, no matter what.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In many programming languages, &lt;code&gt;42&lt;/code&gt; becomes &lt;code&gt;43&lt;/code&gt;. For instance, in JavaScript:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var myData = {num: 42};
var yourData = myData;

myData.num = myData.num + 1;
[myData.num, yourData.num];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to DO, data should never change. Instead of mutating data, we create a new version of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A naive (and inefficient) way to create a new version of a data is to clone it before modifying it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, here is an function that changes the value of a field inside an object, by cloning the object via &lt;code&gt;Object.assign&lt;/code&gt; provided natively by JavaScript:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function changeValue(obj, k, v) {
  var res = Object.assign({}, obj);
  res[k] = v;
  return res;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, when change &lt;code&gt;myData&lt;/code&gt;, &lt;code&gt;yourData&lt;/code&gt; is not affected:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var myData = {num: 42};
var yourData = myData;

myData = changeValue(myData, &amp;quot;num&amp;quot;, myData.num + 1);
[myData.num, yourData.num];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s the essence of data immutability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Clojure, data is immutable by default. In JavaScript, embracing immutability in an efficient way requires a third party library like &lt;a href=&quot;https://immutable-js.github.io/immutable-js&quot;&gt;Immutable.js&lt;/a&gt; that provides an efficient implementation of persistent data structures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In most programming languages, there exists libraries that provide an efficient implementation of persistent data structures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Immutable.js, we don&amp;#8217;t use JavaScript native maps and arrays but immutable maps and arrays instantiated via &lt;code&gt;Immutable.Map&lt;/code&gt; and &lt;code&gt;Immutable.List&lt;/code&gt;.
In order to access the element of a map, we use the &lt;code&gt;get&lt;/code&gt; method and we create a new version of the map where one field is modified, with the &lt;code&gt;set&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var myData = Immutable.Map({num: 42})
var yourData = myData;

myData = myData.set(&amp;quot;num&amp;quot;, 43);

[myData.get(&amp;quot;num&amp;quot;), yourData.get(&amp;quot;num&amp;quot;)];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-principle-3&quot;&gt;Benefits of Principle #3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we constraint our program to never mutate data, our programs benefit from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data access to all with serenity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code behavior is predictable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Equality check is fast&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concurrency safety for free&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-1-data-access-to-all-with-serenity&quot;&gt;Benefit #1: Data access to all with serenity&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to &lt;a href=&quot;/databook/2020/10/02/separate-code-data.html&quot;&gt;Principle #1: Separate code from data&lt;/a&gt;, data access is transparent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any function is allowed to access any piece of data. Without data immutability, we would need to be careful each time we pass data as an argument to a function.
We would need to either make sure the function doesn&amp;#8217;t mutate the data or clone the data before we pass it to the function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we adhere to data immutability, none of this is required. We can pass data to any function with serenity, because data never changes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-2-code-behavior-is-predictable&quot;&gt;Benefit #2: Code behavior is predictable&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let me illustrate what I mean by &lt;em&gt;predictable&lt;/em&gt; by giving an example of an unpredictable piece of code that doesn&amp;#8217;t adhere to data immutability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please take a look at the following piece of asynchronous piece of code in JavaScript:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var myData = {num: 42};
setTimeout(function(data){
  console.log(data.num);
}, 1000, myData)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The value of &lt;code&gt;data.num&lt;/code&gt; inside the timeout callback is not predictable. It could be modified by another callback.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if you constraint yourself to data immutability, you are guaranteed that data never changes and you can predict that &lt;code&gt;data.num&lt;/code&gt; is &lt;code&gt;42&lt;/code&gt; inside the callback!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-3-equality-check-is-fast&quot;&gt;Benefit #3: Equality check is fast&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a UI framework like React.js, we frequently check what portion of the &quot;UI data&quot; has been modified since the previous rendering cycle. Portions that didn&amp;#8217;t change are not rendered again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact, in a typical frontend application, most of the UI data is left unchanged between subsequent rendering cycles. In a React application that doesn&amp;#8217;t adhere to data immutability, we have no other choice that checking every (nested) part of the UI data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However in a React application that follows data immutability, we can optimize the comparison of the data for the case where data was not modified. Indeed, when the object address is the same, then we know for sure that the data did not change. Comparing object addresses is much faster than comparing all the fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fast equality check could be leverage in any program that adhere to Principle #3.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-4-concurrency-safety-for-free&quot;&gt;Benefit #4: Concurrency safety for free&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a multi threaded environment, we usually use concurrency safety mechanisms (e.g. mutexes) to make sure the data is not modified by thread &lt;code&gt;A&lt;/code&gt; while we access it in thread &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the slight performance hit they cause, concurrency safety mechanisms is a burden for our minds and it makes code writing and reading much more difficult.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we adhere to data immutability, no concurrency mechanism is required: the data you have in hand never changes!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;price-for-principle-3&quot;&gt;Price for Principle #3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are no free meals. Applying Principle #3 comes at a price:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Performance hit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Need a library for persistent data structures&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-1-performance-hit&quot;&gt;Price #1: Performance hit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we mentioned earlier, there exist implementation of persistent data structures in most programming languages. But the most efficient implementation will always be a bit slower than the in-place mutation of the data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In most applications, the performance hit is not significant. But it is something to keep in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-2-need-a-library-for-persistent-data-structures&quot;&gt;Price #2: Need a library for persistent data structures&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As far as I know, Clojure is the only programming language where data is immutable by default.  For other languages, adhering to data immutability requires the inclusion a third party library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fact that the data structures are not native to the language means that it is difficult (if not impossible) to enforce the usage of immutable data across the board.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, when you integrate with other third party libraries (e.g. a chart library), you need first to convert your persistent data structure into a equivalent native data structure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DO considers data as a value that never changes. When you adhere to this principle, your code is predictable even in a multi threaded environment without mutexes and equality check is fast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, it requires a non negligible mind shift and in all languages beside Clojure, you&amp;#8217;d have to use a third party library that provides an efficient implementation of persistent data structures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Continue your exploration of &lt;a href=&quot;/databook/2020/09/29/do-principles.html&quot;&gt;Data Oriented Programming principles&lt;/a&gt; and move to &lt;a href=&quot;/databook/2020/10/02/data-comparable-value.html&quot;&gt;Principle #4: Data is comparable by value&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html"></summary></entry><entry><title type="html">DO Principle #1: Separate code from data</title><link href="https://blog.klipse.tech//databook/2020/10/02/separate-code-data.html" rel="alternate" type="text/html" title="DO Principle #1: Separate code from data" /><published>2020-10-02T07:31:24+00:00</published><updated>2020-10-02T07:31:24+00:00</updated><id>https://blog.klipse.tech//databook/2020/10/02/separate-code-data</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/10/02/separate-code-data.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-principle-in-a-nutshell&quot;&gt;The principle in a nutshell&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Principle #1: Separate code from data in a way that code resides in functions whose behavior does not depend on data that is somehow encapsulated in the function&amp;#8217;s context.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;remarks-on-principle-1&quot;&gt;Remarks on Principle #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In pure FP, functions behavior depend only on its arguments, but it is not a requirement for DO (global variables are allowed in DO).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is possible to break this principle in FP, by hiding state in the lexical scope of a function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is possible to be compliant with this principle in OOP: The functions could be aggregated as methods of a static class for instance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This principle doesn&amp;#8217;t relate to the way data is modeled. We could be compliant with this principle by creating a specific class for each kind of data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;illustration-of-principle-1&quot;&gt;Illustration of Principle #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let me illustrate how we can follow this principle or break it on a simplistic program that deals with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;An author entity with a &lt;code&gt;firstName&lt;/code&gt;, a &lt;code&gt;lastName&lt;/code&gt; and a number of &lt;code&gt;books&lt;/code&gt; he/she wrote&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A piece of code that calculates the full name of the author and a number of &lt;code&gt;books&lt;/code&gt; he/she wrote&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A piece of code that determines if an author is prolific, based on the number of books he/she wrote&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We break this principle when we combine data and code together in an object, like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;class Author {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
  fullName() {
      return this.firstName + &amp;quot; &amp;quot; + this.lastName;
  }
  isProlific() {
    return this.books &amp;gt; 100;
  }
}

var obj = new Author(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500); // Isaac Asimov wrote 500 books!
obj.fullName();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We break this principle &lt;strong&gt;even without classes&lt;/strong&gt;, when we hide the data in the lexical scope of a function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function createAuthorObject(firstName, lastName, books) {
 return {
   fullName: function() {
       return firstName + &amp;quot; &amp;quot; + lastName;
      },
    isProlific: function () {
      return books &amp;gt; 100;
    }
  };
 }

var obj = createAuthorObject(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500); // Isaac Asimov wrote 500 books!
obj.fullName();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are compliant with this principle when we separate the code and the data, like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function createAuthorData(firstName, lastName, books) {
   return {firstName: firstName, lastName: lastName, books: books};
}

function fullName(data) {
   return data.firstName + &amp;quot; &amp;quot; + data.lastName;
}

function isProlific (data) {
  return data.books &amp;gt; 100;
}

var data = createAuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500); // Isaac Asimov wrote 500 books!
fullName(data);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are compliant with this principle &lt;strong&gt;even with classes&lt;/strong&gt; when we write our code in static classes and store our data in classes with no functions, like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;class AuthorData {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
}

class NameCalculation {
  static fullName(data) {
    return data.firstName + &amp;quot; &amp;quot; + data.lastName;
  }
}

class AuthorRating {
  static isProlific (data) {
    return data.books &amp;gt; 100;
  }
}

var data = new AuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500); // Isaac Asimov wrote 500 books!
NameCalculation.fullName(data);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have illustrated how one could follow or break Principle #1, both in OOP and FP,
let&amp;#8217;s explore what benefits Principle #1 brings to our programs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-principle-1&quot;&gt;Benefits of Principle #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we are careful to separate code and data, our programs benefit from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Code can be reused in different contexts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code can be tested in isolation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Systems tend to be less complex&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-1-code-can-be-reused-in-different-contexts&quot;&gt;Benefit #1: Code can be reused in different contexts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine that we have in our program an entity that is similar to an author e.g. an artist that has the same &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; fields as an author.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the version with &lt;code&gt;createAuthorObject&lt;/code&gt;, we cannot reuse the code of &lt;code&gt;fullName&lt;/code&gt; on an artist in a straightforward way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One way to deal with that is to use OO mechanisms like inheritance or composition to let the &lt;code&gt;artist&lt;/code&gt; and the &lt;code&gt;author&lt;/code&gt; object use the same &lt;code&gt;fullName&lt;/code&gt; method.
In a simplistic use case like the author and the artist that&amp;#8217;s fine but on real world systems, the usage of OO mechanisms tends to increase complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another option is to rewrite the code of &lt;code&gt;fullName&lt;/code&gt; inside a &lt;code&gt;createArtistObject&lt;/code&gt; function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function createAuthorObject(firstName, lastName, books) {
   var data = {firstName: firstName, lastName: lastName, books: books};

 return {
   fullName: function fullName() {
       return data.firstName + &amp;quot; &amp;quot; + data.lastName;
      }
  };
 }

function createArtistObject(firstName, lastName, genre) {
   var data = {firstName: firstName, lastName: lastName, genre: genre};

 return {
   fullName: function fullName() {
       return data.firstName + &amp;quot; &amp;quot; + data.lastName;
      }
  };
 }

var obj = createArtistObject(&amp;quot;Maurits&amp;quot;, &amp;quot;Escher&amp;quot;, &amp;quot;Painting&amp;quot;);
obj.fullName();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the DO version where &lt;code&gt;createAuthorData&lt;/code&gt; and &lt;code&gt;fullName&lt;/code&gt; are separate, we don&amp;#8217;t need to make any modification to the existing code (the code that deals with author).
We simply leverage the fact that
the data that is relevant to the full name calculation for an artist and an author
follows the same shape and we call &lt;code&gt;fullName&lt;/code&gt; on an artist data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function createAuthorData(firstName, lastName, books) {
  return {firstName: firstName, lastName: lastName, books: books};
}

function fullName(data) {
  return data.firstName + &amp;quot; &amp;quot; + data.lastName;
}

function createArtistData(firstName, lastName, genre) {
   return {firstName: firstName, lastName: lastName, genre: genre};
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;fullName&lt;/code&gt; function works properly both on author data and on artist data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data = createAuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500);
fullName(data);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data = createArtistData(&amp;quot;Maurits&amp;quot;, &amp;quot;Escher&amp;quot;, &amp;quot;Painting&amp;quot;);
fullName(data);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When applied, this principle allows code to be reused in a straightforward way, &lt;strong&gt;even when we use classes&lt;/strong&gt;.
In statically typed OO languages (like Java or C#), we would have to create a common interface
for &lt;code&gt;AuthorData&lt;/code&gt; and &lt;code&gt;ArtistData&lt;/code&gt;, but in a dynamically typed language like JavaScript, it is not required:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;class AuthorData {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
}

class NameCalculation {
  static fullName() {
    return data.firstName + &amp;quot; &amp;quot; + data.lastName;
  }
}

class ArtistData {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
}

// required trick to make the classes accessible to other snippets
window.AuthorData = AuthorData
window.NameCalculation = NameCalculation
window.ArtistData = ArtistData&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code of &lt;code&gt;NameCalculation.fullName&lt;/code&gt; works both of author data and artist data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data = new ArtistData(&amp;quot;Maurits&amp;quot;, &amp;quot;Escher&amp;quot;, &amp;quot;Painting&amp;quot;);
NameCalculation.fullName(data);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data = new AuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500);
NameCalculation.fullName(data);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
When we separate code and data, it is straightforward to reuse code in different contexts. This benefit is achievable both in FP and in OOP.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-2-code-can-be-tested-in-isolation&quot;&gt;Benefit #2: Code can be tested in isolation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another benefit of separating code and data, which is similar to the previous one, is that we are free to test code in an isolated context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we don&amp;#8217;t separate code from data, we are forced to instantiate an object in order to test each of its methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, in order to test the &lt;code&gt;fullName&lt;/code&gt; code that lives inside the &lt;code&gt;createAuthorObject&lt;/code&gt; function, we are required to instantiate an author object:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var author =  createAuthorObject(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500);

author.fullName() === &amp;quot;Isaac Asimov&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this simplistic scenario, it is not a big pain (only loading unnecessarily the code for &lt;code&gt;isProlific&lt;/code&gt;),
but in a real world situation, instantiating an object might involve lots of unnecessary steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the DO version, where &lt;code&gt;createAuthorData&lt;/code&gt; and &lt;code&gt;fullName&lt;/code&gt; are separate, we are free to create the data to be passed to &lt;code&gt;fullName&lt;/code&gt; as we want and test &lt;code&gt;fullName&lt;/code&gt; in isolation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;
fullName({firstName: &amp;quot;Isaac&amp;quot;, lastName: &amp;quot;Asimov&amp;quot;}) === &amp;quot;Isaac Asimov&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we choose to use classes, we only need to instantiate a data object. The code for &lt;code&gt;isProlific&lt;/code&gt; doesn&amp;#8217;t have to be loaded in order to test &lt;code&gt;fullName&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data =  new AuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;);

NameCalculation.fullName(data) === &amp;quot;Isaac Asimov&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second benefit of separating code and data is that it&amp;#8217;s easier to write tests for our code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-3-systems-tend-to-be-less-complex&quot;&gt;Benefit #3: Systems tend to be less complex&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The third and last benefit of applying Principle #1 is that systems tend to be less complex.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This benefit is the deepest one but also the one that is the hardest (for me) to explain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The type of complexity I refer to is the one which makes large systems hard to understand as it is defined in the beautiful paper &lt;a href=&quot;https://github.com/papers-we-love/papers-we-love/blob/master/design/out-of-the-tar-pit.pdf&quot;&gt;Out of the Tar Pit&lt;/a&gt;.
It has nothing to do with the complexity of the resources consumed by a program.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, when we refer to simplicity, we mean &quot;not complex&quot;, in other words easy to understand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Keep in mind that complexity and simplicity (like hard and easy) are not absolute but relative concepts.
We can compare the complexity of two systems and argue that system A is more complex (or simpler) than system B.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When code and data reside in separate entities, the system is easier to understand for two reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Entities are split into disjoint groups: code and data. Therefore entities have less relations with other entitites.&lt;/div&gt;
&lt;p&gt;Let me illustrate this insight on a class diagram of a Library management system, where code and data are mixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lib-mgmt-class-diagram-overview&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/complex-class-relation.png&quot; alt=&quot;complex class relation&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. A class diagram overview for a Library management system&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is not required to know the details of the classes to notice that this diagram represent a system that is complex in the sense that it is hard to understand.
The system is hard to understand because there are many dependencies between the entities that compose the system.
The most complex node of the system is the Librarian entity which is connected via 7 edges to other nodes.
Part of the edges are data edges (association and composition) and part of the edges are code edges (inheritance and dependency).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, if we split each class of this system in a code entity and a data entity &lt;em&gt;without making any other modification to the system&lt;/em&gt; the diagram of the system is split into two disjoint parts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The left part is made only of data entities and data edges: association and composition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The right part is made only of code entities and code edges: dependency and inheritance&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;lib-mgmt-simplified-class-diagram&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/data-code-relation.png&quot; alt=&quot;data code relation&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. A class diagram where every class is split into code and data entities&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The resulting system is definitely simpler. I am not sure if there is a formal metric of the complexity of a system that could make tangible what I mean by simpler, but my informal understanding is that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
A system made of disjoint simple parts is less complex than a system made of a single complex part.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One could argue that the complexity of the system where code and data are mixed is due to a bad design and data an experienced OO developer would have designed a simpler system, leveraging smart design patterns.
That&amp;#8217;s true, but in a sense it&amp;#8217;s irrelevant. The point I am trying to make here is that a system made of entities that do not combine code and data &lt;em&gt;tends&lt;/em&gt; to be simpler that a system made of entities that combine code and data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has been said many times that &quot;Simplicity is hard&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My claim is that simplicity is easier to achieve when we separate code and data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;price-for-principle-1&quot;&gt;Price for Principle #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are no free meals. Applying Principle #1 comes at a price.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The price we have to pay in order to benefit from the separation between code and data is that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;There is no control on what code access what data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No packaging&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our systems are made from more entities&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-1-there-is-no-control-on-what-code-access-what-data&quot;&gt;Price #1: There is no control on what code access what data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When code and data are mixed, one can easily understand what are the pieces of code that access a piece of data.
The reason is that the data is encapsulated in an object. It gives us the guaranty that the data is accessible only by the object&amp;#8217;s methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DO, data stands on its own. It is transparent if you want. As a consequence, it can be accessed by any piece of code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we want to refactor the shape of our data,
we need to be very careful and make sure that we have found all the places in our code that access the data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Without the application of &lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Principle #3&lt;/a&gt; that enforces data immutability,
the fact that the data is accessible by any piece of code would be really unsafe as it would be very hard to guarantee the validity of our data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-2-no-packaging&quot;&gt;Price #2: No packaging&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the benefits of OOP is that when you have an object in hand,
it&amp;#8217;s a package that contains both the code (via methods) and the data (via members).
As a consequence, as a developer it&amp;#8217;s really easy to discover what are the various ways to manipulate the data: you look at the methods of the class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DO, the code that manipulate the data could be everywhere. For example, &lt;code&gt;createAuthorData&lt;/code&gt; could be in a file and &lt;code&gt;fullName&lt;/code&gt; in another file. It makes it difficult for developers to discover that the &lt;code&gt;fullName&lt;/code&gt; function is available. In some situations, it could lead to waste of time and unnecessary code duplication.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-3-our-systems-are-made-from-more-entities&quot;&gt;Price #3: Our systems are made from more entities&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s do simple arithmetic. Imagine a system made of N classes that combine code and data. When you split the separate code and data, you get a system made of 2N entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s not accurate, because usually when you separate code and data, the class hierarchy tends to get simpler. Therefore the number of classes in the resulting system will probably be lower than 2N.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On one hand, the entities are simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, we have more entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Depending on the situation, you might prefer one or the other.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DO guides us to separate code from data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we adhere to this principle, our code can be reused in different contexts and tested in isolation and our systems tend to be made of simpler parts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This separation reduces the control we have on what pieces of code access our data and could cause our systems to be made of more entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Continue your exploration of &lt;a href=&quot;/databook/2020/09/29/do-principles.html&quot;&gt;Data Oriented Programming principles&lt;/a&gt; and move to &lt;a href=&quot;/databook/2020/10/02/generic-data-structures.html&quot;&gt;Principle #2: Model entities with generic data structures&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published.</summary></entry><entry><title type="html">Principles of Data Oriented Programming</title><link href="https://blog.klipse.tech//databook/2020/09/29/do-principles.html" rel="alternate" type="text/html" title="Principles of Data Oriented Programming" /><published>2020-09-29T03:31:24+00:00</published><updated>2020-09-29T03:31:24+00:00</updated><id>https://blog.klipse.tech//databook/2020/09/29/do-principles</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/09/29/do-principles.html">&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This chapter is an attempt to illustrate what are the core principles of Data Oriented Programming as I understand them.
It is highly influenced by my programming experience in Clojure, but I believe that those principles are language agnostic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One could adhere to them in an Object Oriented (OO) language like Java or C# and one could break them
in a Functional Programming (FP) language like Ocaml, Haskell, JavaScript (or even in Clojure).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact, in this chapter, I am going to illustrate how those principles could be applied or broken
in JavaScript, a programming language that supports both FP and OOP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The principles of Data Oriented (DO) Programming are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/separate-code-data.html&quot;&gt;Separate code from data&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/generic-data-structures.html&quot;&gt;Model entities with generic data structures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Data is immutable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/data-comparable-value.html&quot;&gt;Data is comparable by value&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/03/data-literal.html&quot;&gt;Data has a literal representation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each principle is explored in a separate article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I encourage you to start your exploration from &lt;a href=&quot;/databook/2020/10/02/separate-code-data.html&quot;&gt;Principle #1: Separate code from data&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about &lt;b&gt;Data Oriented Programming&lt;/b&gt;. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published.</summary></entry></feed>