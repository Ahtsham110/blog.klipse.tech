<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://blog.klipse.tech//feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.klipse.tech//" rel="alternate" type="text/html" /><updated>2020-10-08T11:57:24+00:00</updated><id>https://blog.klipse.tech//feed.xml</id><title type="html">An interactive journey into functional programming with Yehonathan Sharvit</title><subtitle>A journey into functional programming wonders: Clojure, Clojurescript, javascript and ruby. Live Repl. Live Coding. gist. dynamic code. Interactive Code Snippets.
</subtitle><author><name>Yehonathan Sharvit</name></author><entry><title type="html">Clojure and EDN diff tool</title><link href="https://blog.klipse.tech//clojure/2020/10/08/edn-diff.html" rel="alternate" type="text/html" title="Clojure and EDN diff tool" /><published>2020-10-08T05:21:22+00:00</published><updated>2020-10-08T05:21:22+00:00</updated><id>https://blog.klipse.tech//clojure/2020/10/08/edn-diff</id><content type="html" xml:base="https://blog.klipse.tech//clojure/2020/10/08/edn-diff.html">&lt;p&gt;Compare recursively two Clojure data structures &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Comparison is updated as you typeâ€¦&lt;/p&gt;

&lt;pre class=&quot;hidden&quot;&gt;&lt;code class=&quot;language-klipse&quot;&gt;
(require '[clojure.data :refer [diff]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(def a {:only-in-a 1
        :both-in-a-and-b 3}) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(def b {:only-in-b 2
        :both-in-a-and-b 3}) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Full comparison:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(def full-comparison (clojure.data/diff a b)) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things only in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(first full-comparison)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things only in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(second full-comparison)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things in both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(last full-comparison)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comparison rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For equal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;, return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[nil nil a]&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Maps are subdiffed where keys match and values differ.&lt;/li&gt;
  &lt;li&gt;Sets are never subdiffed.&lt;/li&gt;
  &lt;li&gt;All sequential things are treated as associative collections by their indexes, with results returned as vectors.&lt;/li&gt;
  &lt;li&gt;Everything else (including strings!) is treated as an atom and compared for equality.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explore more examples on &lt;a href=&quot;https://clojuredocs.org/clojure.data/diff&quot;&gt;ClojureDocs&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yehonathan Sharvit</name></author><summary type="html">Compare recursively two Clojure data structures a and b.</summary></entry><entry><title type="html">DO Principle #5: Data has a literal representation</title><link href="https://blog.klipse.tech//databook/2020/10/03/data-literal.html" rel="alternate" type="text/html" title="DO Principle #5: Data has a literal representation" /><published>2020-10-03T18:31:24+00:00</published><updated>2020-10-03T18:31:24+00:00</updated><id>https://blog.klipse.tech//databook/2020/10/03/data-literal</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/10/03/data-literal.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Data Oriented programming data is a first class citizen that is considered as a value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It comes down to 3 principles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Principle #3: Data is immutable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/data-comparable-value.html&quot;&gt;Principle #4: Data is comparable by value&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/03/data-literal.html&quot;&gt;Principle #5: Data has a literal representation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we explore Principle #5.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-principle-in-a-nutshell&quot;&gt;The principle in a nutshell&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Principle #5: Data can be represented by literals.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;remarks-on-principle-5&quot;&gt;Remarks on Principle #5&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Principle #5 is in fact made of two parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;It is possible to display the content of any data collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A data collection can be instantiated via a literal.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;illustration-of-principle-5&quot;&gt;Illustration of Principle #5&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Principle #5 is in fact made of two parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;It is possible to display the content of any data collection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A data collection can be instantiated via a literal&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A language like JavaScript adheres to both parts of Principle #5.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Part 1 is satisfied because any data collection could be serialized to a JSON string.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Part 2 is satisfied because we can instantiate maps and arrays via literals&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a language like Java or C#, where the only way to instantiate a data collection is via class constructors and setters, it is not possible to adhere to the second part of Principle #5.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-principle-5&quot;&gt;Benefits of Principle #5&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we choose a language that support data representation via literals, we benefit from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data creation is not verbose&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data is explorable in any context&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-1-data-creation-is-not-verbose&quot;&gt;Benefit #1: Data creation is not verbose&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s illustrate how much verbosity is involved in data creation via class constructors and setters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var data = new Object();
data.firstName = &quot;Isaac&quot;;
data.lastName = &quot;Asimov&quot;;
data&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And it is even worse when the map is nested, as we have to explicitly create empty maps for intermediate levels of nesting:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var data = new Object();
data.firstName = &quot;Isaac&quot;;
data.lastName = &quot;Asimov&quot;;
data.details = new Object();
data.details.yearOfBirth = 1920;
data.details.yearOfDeath = 1992;
data;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, data creation via literals is compact and clear:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var data = {
  &quot;firstName&quot;: &quot;Isaac&quot;,
  &quot;lastName&quot;: &quot;Asimov&quot;,
  &quot;details&quot;: {
    &quot;yearOfBirth&quot;: 1920,
    &quot;yearOfDeath&quot;: 1992
  }
}
data;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-2-data-is-explorable-in-any-context&quot;&gt;Benefit #2: Data is explorable in any context&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a program that adhere to DO principles, it is quite common to display data to the console or to log files.
No special effort is required for that. We simply call a printing function and our data is automatically converted to a string.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we combine Benefit #1 and #2 together we are able to open a log file, copy from it a piece of data, paste it in our source code as a data literal and boom, our data is instantiated!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;price-for-principle-5&quot;&gt;Price for Principle #5&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are no free meals. The privilege of being able to represent data with literals comes at a price:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dangerous when the data is big&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confusion when part of the data is not data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-1-dangerous-when-the-data-is-big&quot;&gt;Price #1: Dangerous when the data is big&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is so convenient to print data to log files that we sometimes omit to check that the data is not too big and it causes our log files to grow beyond expectations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a language like Clojure, it is possible to control the maximal length of the printing functions via a dynamic variable which mitigates the risk for huge log files.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-3-confusion-when-part-of-the-data-is-not-data&quot;&gt;Price #3: Confusion when part of the data is not data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It might occur that we store a value in a map that is not data, for instance a function in JavaScript:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var mapWithFunction = {
  &quot;firstName&quot;: &quot;Isaac&quot;,
  &quot;lastName&quot;: &quot;Asimov&quot;,
  &quot;foo&quot;: function (x) { return x;}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The value associated to &lt;code&gt;foo&lt;/code&gt; is not data: it is a function. Functions are not serializable to JSON. Therefore, by default when we serialize &lt;code&gt;mapWithFunction&lt;/code&gt;, the &lt;code&gt;foo&lt;/code&gt; field is omitted from the serialized string:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;JSON.stringify(mapWithFunction);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On one hand it makes sense. On the other hand it might be confusing in some situations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, a confusion could occur if we stringify &lt;code&gt;mapWithFunction&lt;/code&gt; then parse it back and count the number of keys in the resulting objects.
We might be confused by the fact that &lt;code&gt;mapWithFunction&lt;/code&gt; has 3 keys while after a round trip, we are left with two keys:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;Object.keys(JSON.parse(JSON.stringify(mapWithFunction))).length;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We conclude our exploration of the principles of Data Oriented programming with the principle that says that data (like numbers and strings) should be representable by literals. That is the cherry on the cake if you want. This cherry is indeed very tasty but it is not available in every programming language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you adhere to all the principles of DO beside this one, I am willing to make an exception and give you a DO certificate&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published.</summary></entry><entry><title type="html">DO Principle #4: Data is comparable by value</title><link href="https://blog.klipse.tech//databook/2020/10/02/data-comparable-value.html" rel="alternate" type="text/html" title="DO Principle #4: Data is comparable by value" /><published>2020-10-02T17:31:24+00:00</published><updated>2020-10-02T17:31:24+00:00</updated><id>https://blog.klipse.tech//databook/2020/10/02/data-comparable-value</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/10/02/data-comparable-value.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/immutable/3.8.2/immutable.min.js&quot; integrity=&quot;sha512-myCdDiGJRYrvRb/VuJ67ljifYTJdc1jdEvL4c4ftX9o3N6EAnmD83c/7l2/91RCINZ7c8w21tiXDT7RDFjdc3g==&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Data Oriented programming data is a first class citizen that is considered as a value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It comes down to 3 principles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Principle #3: Data is immutable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/data-comparable-value.html&quot;&gt;Principle #4: Data is comparable by value&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/03/data-literal.html&quot;&gt;Principle #5: Data has a literal representation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we explore Principle #4.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-principle-in-a-nutshell&quot;&gt;The principle in a nutshell&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Principle #4: Data collections are considered to be equal if they represent the same collection of values.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;remarks-on-principle-4&quot;&gt;Remarks on Principle #4&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Definition of equality in Computer Science is a deep topic. We are only scratching the surface here&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are not dealing here with the comparison of data collection of different types (e.g. lists and vectors)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are not dealing only with equality of primitive types&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;illustration-of-principle-4&quot;&gt;Illustration of Principle #4&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In concrete terms, Principle #4 says that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Two arrays with same elements are considered to be equal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two maps with the same keys and values are considered to be equal&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This definition is in fact a recursive definition because the elements of an array and the values of a map could themselves be arrays and maps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In native JavaScript, this principle is broken both for arrays and maps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var a = [1];
var b = [1];
a === b;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var a = {username: &quot;foo&quot;};
var b = {username: &quot;foo&quot;};
a === b;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to compare data by value, one needs a custom equality function like the &lt;code&gt;is&lt;/code&gt; function provided by
  &lt;a href=&quot;https://immutable-js.github.io/immutable-js&quot;&gt;Immutable.js&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var a = Immutable.List([1]);
var b = Immutable.List([1]);
Immutable.is(a, b);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var a = Immutable.Map({username: &quot;foo&quot;});
var b = Immutable.Map({username: &quot;foo&quot;});
Immutable.is(a, b);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-principle-4&quot;&gt;Benefits of Principle #4&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we compare data by value across the board, our programs benefit from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Writing unit tests is a pleasure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maps with data keys&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-1-writing-unit-tests-is-a-pleasure&quot;&gt;Benefit #1: Writing unit tests is a pleasure&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When data equality is defined by value, we can specify the expected return value of a function as data instead of having to check each value separately.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s write a &quot;unit test&quot; for a function that returns a (immutable) map with the full name of an author&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is the code for &lt;code&gt;addFullName&lt;/code&gt;, using &lt;code&gt;R.assoc&lt;/code&gt; from Ramda.js as we showed in  &lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Principle #3: Data is immutable&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;function addFullName(data) {
  return data.set(&quot;fullName&quot;,
          data.firstName + &quot; &quot; + data.lastName,
          data);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to write a unit test for &lt;code&gt;addFullName&lt;/code&gt; without equality by value, we would need to check each field separately:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var isaac = Immutable.Map({firstName: &quot;Isaac&quot;, lastName: &quot;Asimov&quot;});
var enrichedIsaac = addFullName(isaac);
enrichedIsaac.get(&quot;firstName&quot;) === &quot;Isaac&quot; &amp;amp;&amp;amp;
  enrichedIsaac.get(&quot;lastName&quot;) === &quot;Asimov&quot; &amp;amp;&amp;amp;
  enrichedIsaac.get(&quot;fullName&quot;) === &quot;Isaac Asimov&quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With equality by value, using &lt;code&gt;Immutable.is&lt;/code&gt; from Immutable.js, the unit test becomes much clearer
as we are able to simply specify what is the expected output of our function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var isaac = Immutable.Map({firstName: &quot;Isaac&quot;, lastName: &quot;Asimov&quot;});
var enrichedIsaac = addFullName(isaac);
Immutable.is(enrichedIsaac, Immutable.Map({firstName: &quot;Isaac&quot;,
                                           lastName: &quot;Asimov&quot;,
                                           fullName: &quot;Isaac Asimov&quot;}))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-2-maps-with-data-keys&quot;&gt;Benefit #2: Maps with data keys&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The behavior of a map data structure is connected deeply with the definition of &lt;strong&gt;equality&lt;/strong&gt; of the map keys. When we look for the value associated to key &lt;code&gt;a&lt;/code&gt; in a map &lt;code&gt;m&lt;/code&gt; what we really means is to find an entry in the map whose key is &lt;strong&gt;equal&lt;/strong&gt; to &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In many situations, the keys of the maps are strings and strings are compared by value. But what happens when we allow keys to be maps?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In JavaScript, when map keys are maps, we could have two different entries in the map with the &quot;same&quot; key:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var myMap = new Map;
var myData = {&quot;foo&quot;: 1};
var yourData = {&quot;foo&quot;: 1};

myMap.set(myData, 42);
myMap.set(yourData, 43);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reason is that JavaScript doesn&amp;#8217;t adhere to Principle #4.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we use a library that adheres to Principle #4, like Immutable.js, this weird situation doesn&amp;#8217;t occur:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var myMap = Immutable.Map({});
var myData = Immutable.Map({&quot;foo&quot;: 1});
var yourData = Immutable.Map({&quot;foo&quot;: 1});

myMap.set(myData, 42);
myMap.set(yourData, 43);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;price-for-principle-4&quot;&gt;Price for Principle #4&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are no free meals. Applying Principle #4 comes at a price:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No native support&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-1-no-native-support&quot;&gt;Price #1: No native support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Clojure, equality is defined by value in compliance with Principle #4.
However, on most programming languages, equality is defined by reference and not by value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to adhere to Principle #4, we must careful to never use the native equality check to compare data collections.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DO considers data as a value. As consequence, data should be compared by value either when we explicitly check if two pieces of data are equal or implicitly as a data key in a map. In most languages, we need a third party library to provide this value based equality check.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Continue your exploration of &lt;a href=&quot;/databook/2020/09/29/do-principles.html&quot;&gt;Data Oriented Programming principles&lt;/a&gt; and move to &lt;a href=&quot;/databook/2020/10/03/data-literal.html&quot;&gt;Data has a literal representation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html"></summary></entry><entry><title type="html">DO Principle #2: Model entities with generic data structures</title><link href="https://blog.klipse.tech//databook/2020/10/02/generic-data-structures.html" rel="alternate" type="text/html" title="DO Principle #2: Model entities with generic data structures" /><published>2020-10-02T09:31:24+00:00</published><updated>2020-10-02T09:31:24+00:00</updated><id>https://blog.klipse.tech//databook/2020/10/02/generic-data-structures</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/10/02/generic-data-structures.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js&quot; integrity=&quot;sha512-90vH1Z83AJY9DmlWa8WkjkV79yfS2n2Oxhsi2dZbIv0nC4E6m5AbH8Nh156kkM7JePmqD6tcZsfad1ueoaovww==&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-principle-in-a-nutshell&quot;&gt;The principle in a nutshell&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Principle #2: Model the data part of the entities of your application using generic data structures (mostly maps and arrays).
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;remarks-on-principle-2&quot;&gt;Remarks on Principle #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s optional to specify or not the shape of the data of an entity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FP Languages that are statically typed (e.g. Haskell and Ocaml) are not compliant with this principle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The most common data structures are maps (a.k.a dictionaries) and arrays. Other data structures: sets, lists and queues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Principle #2 doesn&amp;#8217;t deal with the mutability or the immutability of the data. This is the theme of &lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Principle #3: Data is immutable&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;illustration-of-principle-2&quot;&gt;Illustration of Principle #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to &lt;a href=&quot;/databook/2020/10/02/separate-code-data.html&quot;&gt;Principle #1: Separate code from data&lt;/a&gt;, we have to separate code and data. The theme of Principle #2 is about the programming constructs that we should use to model our data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DO, we model our data with generic data structures (like maps and arrays) instead of specific classes. Most of the data entities that appear in a typical application could be modeled with maps and arrays.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s look at the same simplistic example as the one used to illustrate &lt;a href=&quot;/databook/2020/10/02/separate-code-data.html&quot;&gt;Principle #1&lt;/a&gt;: the data that represents and author.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An author is a data entity with a &lt;code&gt;firstName&lt;/code&gt;, a &lt;code&gt;lastName&lt;/code&gt; and a number of &lt;code&gt;books&lt;/code&gt; he/she wrote.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We break this principle when we use classes to represent an author, like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;class AuthorData {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are compliant with this principle when we use a map (which is a generic data structure) to represent an author:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;function createAuthorData(firstName, lastName, books) {
 var data = new Object;
 data.firstName = firstName;
 data.lastName = lastName;
 data.books = books;
return data;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a language like JavaScript, a map could be instantiated also via literals, which is a bit more convenient:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;function createAuthorData(firstName, lastName, books) {
   return {firstName: firstName, lastName: lastName, books: books};
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-principle-2&quot;&gt;Benefits of Principle #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we use generic data structures to represent our data, our programs benefit from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Leverage functions that are not limited to our specific use case&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flexible data model&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;leverage-functions-that-are-not-limited-to-our-specific-use-case&quot;&gt;Leverage functions that are not limited to our specific use case&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a famous quote by Alan Perlis that summarizes this benefit very well:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Alan Perlis
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we use generic data structures to represent entities, we have the privilege to manipulate the entities with the rich set of functions available on maps natively in our programming language in addition to the ones provided by third party libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, JavaScript natively provides some basic functions on objects and
third party libraries like &lt;a href=&quot;https://lodash.com/&quot;&gt;lodash&lt;/a&gt; extend the functionality with even more functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an example, when an author is represented as a map, we can serialize it into JSON for free, using &lt;code&gt;JSON.stringify&lt;/code&gt; which is part of JavaScript:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var data = createAuthorData(&quot;Isaac&quot;, &quot;Asimov&quot;, 500);
JSON.stringify(data);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And if we want to serialize the author data without the number of books,
we can use lodash&amp;#8217;s &lt;code&gt;pick&lt;/code&gt; function to create an object with a subset of keys:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var data = createAuthorData(&quot;Isaac&quot;, &quot;Asimov&quot;, 500);
var dataWithoutBooks = _.pick(data, ['firstName', 'lastName']);
JSON.stringify(dataWithoutBooks);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you adhere to Principle #2, all this wealth of functionalities is available to manipulate all your entities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;flexible-data-model&quot;&gt;Flexible data model&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we use generic data structures, our data model is flexible in the sense that our data is not forced to adhere to a specific shape. We are free to create data with no predefined shape. And we are free to modify the shape of our data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In classical OO, each piece of data is instantiated via a class.
As a consequence, even when a slightly different data shape is needed, we have to define a new class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Take for example a class &lt;code&gt;AuthorData&lt;/code&gt; that represent an author entity that made of 3 fields:
&lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt; and &lt;code&gt;books&lt;/code&gt;. Suppose that you want to add a field &lt;code&gt;fullName&lt;/code&gt; with the full name of the author.
In OO, you would have to define a new class &lt;code&gt;AuthorDataWithFullName&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However in DO, you are free to add (or remove) fields to a map &quot;on the fly&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var data = createAuthorData(&quot;Isaac&quot;, &quot;Asimov&quot;, 500);
data.fullName = &quot;Isaac Asimov&quot;;
data&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;price-for-principle-2&quot;&gt;Price for Principle #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are no free meals. Applying Principle #2 comes at a price.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The price we have to pay when we mode entities with generic data structures is that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Performance hit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data shape needs to be documented manually&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No compile time check that the data is valid&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-1-performance-hit&quot;&gt;Price #1: Performance hit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we use specific classes to instantiate data, retrieving the value of a class member is super fast. The reason is that the compiler knows upfront how the data is going to look like and it can do all kinds of optimizations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, when we use generic data structures to store data, the data structure is optimized for the general case, like retrieving an arbitrary key from a map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Retrieving an arbitrary key from a map is slower than retrieving the value of a class member.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly setting an arbitrary key to a value is slower that setting the valued of a class member.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Usually, this performance hit is not significant, but it is something to keep in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-2-data-shape-needs-to-be-documented-manually&quot;&gt;Price #2: Data shape needs to be documented manually&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When an object is instantiated from a class, the information of the data shape is in the class definition.
It is helpful for developers and for IDEs (think about auto-completion features).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we use generic data structures to store data, the shape of the data needs to be documented manually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even when we are disciplined enough and we document our code,
it may occur that we modify slightly the shape of an entity and we forget to update the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In that case, we have to explore the code in order to figure out what is the real shape of our data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-3-no-compile-time-check-that-the-data-is-valid&quot;&gt;Price #3: No compile time check that the data is valid&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Take a look again at the &lt;code&gt;fullName&lt;/code&gt; function that we created during our exploration of &lt;a href=&quot;/databook/2020/10/02/separate-code-data.html&quot;&gt;Principle #1&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;function fullName(data) {
   return data.firstName + &quot; &quot; + data.lastName;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we pass to &lt;code&gt;fullName&lt;/code&gt; a piece of data that doesn&amp;#8217;t conform to the shape &lt;code&gt;fullName&lt;/code&gt; expects, an error occurs at runtime.
For example, we could mistype the field that stores the first name (&lt;code&gt;fistName&lt;/code&gt; instead of &lt;code&gt;firstName&lt;/code&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;fullName({fistName: &quot;Issac&quot;, lastName: &quot;Asimov&quot;})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When data is instantiated only via classes, this type of error is caught at compile time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DO guides us to use generic data structures to model our entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we adhere to this principle, it allows us to manipulate the entities with generic functions (provided by the language and by third party libraries)
and it keeps our data model flexible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This flexibility causes a (small) performance hit and forces us to document manually the shape of our data as we cannot rely on the compiler to statically validate it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Continue your exploration of &lt;a href=&quot;/databook/2020/09/29/do-principles.html&quot;&gt;Data Oriented Programming principles&lt;/a&gt; and move to &lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Principle #3: Data is immutable&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html"></summary></entry><entry><title type="html">DO Principle #3: Data is immutable</title><link href="https://blog.klipse.tech//databook/2020/10/02/immutable-data.html" rel="alternate" type="text/html" title="DO Principle #3: Data is immutable" /><published>2020-10-02T09:31:24+00:00</published><updated>2020-10-02T09:31:24+00:00</updated><id>https://blog.klipse.tech//databook/2020/10/02/immutable-data</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/10/02/immutable-data.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/immutable/3.8.2/immutable.min.js&quot; integrity=&quot;sha512-myCdDiGJRYrvRb/VuJ67ljifYTJdc1jdEvL4c4ftX9o3N6EAnmD83c/7l2/91RCINZ7c8w21tiXDT7RDFjdc3g==&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Data Oriented programming data is a first class citizen that is considered as a value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It comes down to 3 principles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Principle #3: Data is immutable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/data-comparable-value.html&quot;&gt;Principle #4: Data is comparable by value&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/03/data-literal.html&quot;&gt;Principle #5: Data has a literal representation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we explore Principle #3.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-principle-in-a-nutshell&quot;&gt;The principle in a nutshell&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Principle #3: Data never changes.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;remarks-on-principle-3&quot;&gt;Remarks on Principle #3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data never changes, but we have the possibility to create a new version of the data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are allowed to change the reference of a variable, so that it refers to a new version of the data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;illustration-of-principle-3&quot;&gt;Illustration of Principle #3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Think about the number &lt;code&gt;42&lt;/code&gt;. What happens to &lt;code&gt;42&lt;/code&gt; when you add &lt;code&gt;1&lt;/code&gt; to it? Does it become &lt;code&gt;43&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No! &lt;code&gt;42&lt;/code&gt; stays &lt;code&gt;42&lt;/code&gt; forever!!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now put &lt;code&gt;42&lt;/code&gt; inside an object &lt;code&gt;{num: 42}&lt;/code&gt;. What happens to the object when you add &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;42&lt;/code&gt;? Does it become &lt;code&gt;43&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It depends on the programming language. In Clojure, a programming language that embraces data immutability,  &lt;code&gt;42&lt;/code&gt; stays &lt;code&gt;42&lt;/code&gt; forever, no matter what.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In many programming languages, &lt;code&gt;42&lt;/code&gt; becomes &lt;code&gt;43&lt;/code&gt;. For instance, in JavaScript:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var myData = {num: 42};
var yourData = myData;

myData.num = myData.num + 1;
[myData.num, yourData.num];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to DO, data should never change. Instead of mutating data, we create a new version of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A naive (and inefficient) way to create a new version of a data is to clone it before modifying it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, here is an function that changes the value of a field inside an object, by cloning the object via &lt;code&gt;Object.assign&lt;/code&gt; provided natively by JavaScript:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;function changeValue(obj, k, v) {
  var res = Object.assign({}, obj);
  res[k] = v;
  return res;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, when change &lt;code&gt;myData&lt;/code&gt;, &lt;code&gt;yourData&lt;/code&gt; is not affected:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var myData = {num: 42};
var yourData = myData;

myData = changeValue(myData, &quot;num&quot;, myData.num + 1);
[myData.num, yourData.num];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s the essence of data immutability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Clojure, data is immutable by default. In JavaScript, embracing immutability in an efficient way requires a third party library like &lt;a href=&quot;https://immutable-js.github.io/immutable-js&quot;&gt;Immutable.js&lt;/a&gt; that provides an efficient implementation of persistent data structures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In most programming languages, there exists libraries that provide an efficient implementation of persistent data structures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Immutable.js, we don&amp;#8217;t use JavaScript native maps and arrays but immutable maps and arrays instantiated via &lt;code&gt;Immutable.Map&lt;/code&gt; and &lt;code&gt;Immutable.List&lt;/code&gt;.
In order to access the element of a map, we use the &lt;code&gt;get&lt;/code&gt; method and we create a new version of the map where one field is modified, with the &lt;code&gt;set&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var myData = Immutable.Map({num: 42})
var yourData = myData;

myData = myData.set(&quot;num&quot;, 43);

[myData.get(&quot;num&quot;), yourData.get(&quot;num&quot;)];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-principle-3&quot;&gt;Benefits of Principle #3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we constraint our program to never mutate data, our programs benefit from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data access to all with serenity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code behavior is predictable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Equality check is fast&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concurrency safety for free&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-1-data-access-to-all-with-serenity&quot;&gt;Benefit #1: Data access to all with serenity&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to &lt;a href=&quot;/databook/2020/10/02/separate-code-data.html&quot;&gt;Principle #1: Separate code from data&lt;/a&gt;, data access is transparent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any function is allowed to access any piece of data. Without data immutability, we would need to be careful each time we pass data as an argument to a function.
We would need to either make sure the function doesn&amp;#8217;t mutate the data or clone the data before we pass it to the function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we adhere to data immutability, none of this is required. We can pass data to any function with serenity, because data never changes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-2-code-behavior-is-predictable&quot;&gt;Benefit #2: Code behavior is predictable&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let me illustrate what I mean by &lt;em&gt;predictable&lt;/em&gt; by giving an example of an unpredictable piece of code that doesn&amp;#8217;t adhere to data immutability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please take a look at the following piece of asynchronous piece of code in JavaScript:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var myData = {num: 42};
setTimeout(function(data){
  console.log(data.num);
}, 1000, myData)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The value of &lt;code&gt;data.num&lt;/code&gt; inside the timeout callback is not predictable. It could be modified by another callback.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if you constraint yourself to data immutability, you are guaranteed that data never changes and you can predict that &lt;code&gt;data.num&lt;/code&gt; is &lt;code&gt;42&lt;/code&gt; inside the callback!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-3-equality-check-is-fast&quot;&gt;Benefit #3: Equality check is fast&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a UI framework like React.js, we frequently check what portion of the &quot;UI data&quot; has been modified since the previous rendering cycle. Portions that didn&amp;#8217;t change are not rendered again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact, in a typical frontend application, most of the UI data is left unchanged between subsequent rendering cycles. In a React application that doesn&amp;#8217;t adhere to data immutability, we have no other choice that checking every (nested) part of the UI data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However in a React application that follows data immutability, we can optimize the comparison of the data for the case where data was not modified. Indeed, when the object address is the same, then we know for sure that the data did not change. Comparing object addresses is much faster than comparing all the fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fast equality check could be leverage in any program that adhere to Principle #3.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-4-concurrency-safety-for-free&quot;&gt;Benefit #4: Concurrency safety for free&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a multi threaded environment, we usually use concurrency safety mechanisms (e.g. mutexes) to make sure the data is not modified by thread &lt;code&gt;A&lt;/code&gt; while we access it in thread &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the slight performance hit they cause, concurrency safety mechanisms is a burden for our minds and it makes code writing and reading much more difficult.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we adhere to data immutability, no concurrency mechanism is required: the data you have in hand never changes!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;price-for-principle-3&quot;&gt;Price for Principle #3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are no free meals. Applying Principle #3 comes at a price:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Performance hit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Need a library for persistent data structures&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-1-performance-hit&quot;&gt;Price #1: Performance hit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we mentioned earlier, there exist implementation of persistent data structures in most programming languages. But the most efficient implementation will always be a bit slower than the in-place mutation of the data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In most applications, the performance hit is not significant. But it is something to keep in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-2-need-a-library-for-persistent-data-structures&quot;&gt;Price #2: Need a library for persistent data structures&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As far as I know, Clojure is the only programming language where data is immutable by default.  For other languages, adhering to data immutability requires the inclusion a third party library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fact that the data structures are not native to the language means that it is difficult (if not impossible) to enforce the usage of immutable data across the board.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, when you integrate with other third party libraries (e.g. a chart library), you need first to convert your persistent data structure into a equivalent native data structure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DO considers data as a value that never changes. When you adhere to this principle, your code is predictable even in a multi threaded environment without mutexes and equality check is fast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, it requires a non negligible mind shift and in all languages beside Clojure, you&amp;#8217;d have to use a third party library that provides an efficient implementation of persistent data structures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Continue your exploration of &lt;a href=&quot;/databook/2020/09/29/do-principles.html&quot;&gt;Data Oriented Programming principles&lt;/a&gt; and move to &lt;a href=&quot;/databook/2020/10/02/data-comparable-value.html&quot;&gt;Principle #4: Data is comparable by value&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html"></summary></entry><entry><title type="html">DO Principle #1: Separate code from data</title><link href="https://blog.klipse.tech//databook/2020/10/02/separate-code-data.html" rel="alternate" type="text/html" title="DO Principle #1: Separate code from data" /><published>2020-10-02T07:31:24+00:00</published><updated>2020-10-02T07:31:24+00:00</updated><id>https://blog.klipse.tech//databook/2020/10/02/separate-code-data</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/10/02/separate-code-data.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-principle-in-a-nutshell&quot;&gt;The principle in a nutshell&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Principle #1: Separate code from data in a way that code resides in functions whose behavior does not depend on data that is somehow encapsulated in the function&amp;#8217;s context.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;remarks-on-principle-1&quot;&gt;Remarks on Principle #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In pure FP, functions behavior depend only on its arguments, but it is not a requirement for DO (global variables are allowed in DO).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is possible to break this principle in FP, by hiding state in the lexical scope of a function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is possible to be compliant with this principle in OOP: The functions could be aggregated as methods of a static class for instance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This principle doesn&amp;#8217;t relate to the way data is modeled. We could be compliant with this principle by creating a specific class for each kind of data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;illustration-of-principle-1&quot;&gt;Illustration of Principle #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let me illustrate how we can follow this principle or break it on a simplistic program that deals with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;An author entity with a &lt;code&gt;firstName&lt;/code&gt;, a &lt;code&gt;lastName&lt;/code&gt; and a number of &lt;code&gt;books&lt;/code&gt; he/she wrote&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A piece of code that calculates the full name of the author and a number of &lt;code&gt;books&lt;/code&gt; he/she wrote&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A piece of code that determines if an author is prolific, based on the number of books he/she wrote&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We break this principle when we combine data and code together in an object, like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;class Author {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
  fullName() {
      return this.firstName + &quot; &quot; + this.lastName;
  }
  isProlific() {
    return this.books &amp;gt; 100;
  }
}

var obj = new Author(&quot;Isaac&quot;, &quot;Asimov&quot;, 500); // Isaac Asimov wrote 500 books!
obj.fullName();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We break this principle &lt;strong&gt;even without classes&lt;/strong&gt;, when we hide the data in the lexical scope of a function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;function createAuthorObject(firstName, lastName, books) {
 return {
   fullName: function() {
       return firstName + &quot; &quot; + lastName;
      },
    isProlific: function () {
      return books &amp;gt; 100;
    }
  };
 }

var obj = createAuthorObject(&quot;Isaac&quot;, &quot;Asimov&quot;, 500); // Isaac Asimov wrote 500 books!
obj.fullName();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are compliant with this principle when we separate the code and the data, like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;function createAuthorData(firstName, lastName, books) {
   return {firstName: firstName, lastName: lastName, books: books};
}

function fullName(data) {
   return data.firstName + &quot; &quot; + data.lastName;
}

function isProlific (data) {
  return data.books &amp;gt; 100;
}

var data = createAuthorData(&quot;Isaac&quot;, &quot;Asimov&quot;, 500); // Isaac Asimov wrote 500 books!
fullName(data);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are compliant with this principle &lt;strong&gt;even with classes&lt;/strong&gt; when we write our code in static classes and store our data in classes with no functions, like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;class AuthorData {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
}

class NameCalculation {
  static fullName(data) {
    return data.firstName + &quot; &quot; + data.lastName;
  }
}

class AuthorRating {
  static isProlific (data) {
    return data.books &amp;gt; 100;
  }
}

var data = new AuthorData(&quot;Isaac&quot;, &quot;Asimov&quot;, 500); // Isaac Asimov wrote 500 books!
NameCalculation.fullName(data);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have illustrated how one could follow or break Principle #1, both in OOP and FP,
let&amp;#8217;s explore what benefits Principle #1 brings to our programs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-principle-1&quot;&gt;Benefits of Principle #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we are careful to separate code and data, our programs benefit from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Code can be reused in different contexts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code can be tested in isolation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Systems tend to be less complex&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-1-code-can-be-reused-in-different-contexts&quot;&gt;Benefit #1: Code can be reused in different contexts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine that we have in our program an entity that is similar to an author e.g. an artist that has the same &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; fields as an author.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the version with &lt;code&gt;createAuthorObject&lt;/code&gt;, we cannot reuse the code of &lt;code&gt;fullName&lt;/code&gt; on an artist in a straightforward way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One way to deal with that is to use OO mechanisms like inheritance or composition to let the &lt;code&gt;artist&lt;/code&gt; and the &lt;code&gt;author&lt;/code&gt; object use the same &lt;code&gt;fullName&lt;/code&gt; method.
In a simplistic use case like the author and the artist that&amp;#8217;s fine but on real world systems, the usage of OO mechanisms tends to increase complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another option is to rewrite the code of &lt;code&gt;fullName&lt;/code&gt; inside a &lt;code&gt;createArtistObject&lt;/code&gt; function:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;function createAuthorObject(firstName, lastName, books) {
   var data = {firstName: firstName, lastName: lastName, books: books};

 return {
   fullName: function fullName() {
       return data.firstName + &quot; &quot; + data.lastName;
      }
  };
 }

function createArtistObject(firstName, lastName, genre) {
   var data = {firstName: firstName, lastName: lastName, genre: genre};

 return {
   fullName: function fullName() {
       return data.firstName + &quot; &quot; + data.lastName;
      }
  };
 }

var obj = createArtistObject(&quot;Maurits&quot;, &quot;Escher&quot;, &quot;Painting&quot;);
obj.fullName();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the DO version where &lt;code&gt;createAuthorData&lt;/code&gt; and &lt;code&gt;fullName&lt;/code&gt; are separate, we don&amp;#8217;t need to make any modification to the existing code (the code that deals with author).
We simply leverage the fact that
the data that is relevant to the full name calculation for an artist and an author
follows the same shape and we call &lt;code&gt;fullName&lt;/code&gt; on an artist data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;function createAuthorData(firstName, lastName, books) {
  return {firstName: firstName, lastName: lastName, books: books};
}

function fullName(data) {
  return data.firstName + &quot; &quot; + data.lastName;
}

function createArtistData(firstName, lastName, genre) {
   return {firstName: firstName, lastName: lastName, genre: genre};
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;fullName&lt;/code&gt; function works properly both on author data and on artist data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var data = createAuthorData(&quot;Isaac&quot;, &quot;Asimov&quot;, 500);
fullName(data);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var data = createArtistData(&quot;Maurits&quot;, &quot;Escher&quot;, &quot;Painting&quot;);
fullName(data);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When applied, this principle allows code to be reused in a straightforward way, &lt;strong&gt;even when we use classes&lt;/strong&gt;.
In statically typed OO languages (like Java or C#), we would have to create a common interface
for &lt;code&gt;AuthorData&lt;/code&gt; and &lt;code&gt;ArtistData&lt;/code&gt;, but in a dynamically typed language like JavaScript, it is not required:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;class AuthorData {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
}

class NameCalculation {
  static fullName() {
    return data.firstName + &quot; &quot; + data.lastName;
  }
}

class ArtistData {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
}

// required trick to make the classes accessible to other snippets
window.AuthorData = AuthorData
window.NameCalculation = NameCalculation
window.ArtistData = ArtistData&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code of &lt;code&gt;NameCalculation.fullName&lt;/code&gt; works both of author data and artist data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var data = new ArtistData(&quot;Maurits&quot;, &quot;Escher&quot;, &quot;Painting&quot;);
NameCalculation.fullName(data);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var data = new AuthorData(&quot;Isaac&quot;, &quot;Asimov&quot;, 500);
NameCalculation.fullName(data);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
When we separate code and data, it is straightforward to reuse code in different contexts. This benefit is achievable both in FP and in OOP.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-2-code-can-be-tested-in-isolation&quot;&gt;Benefit #2: Code can be tested in isolation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another benefit of separating code and data, which is similar to the previous one, is that we are free to test code in an isolated context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we don&amp;#8217;t separate code from data, we are forced to instantiate an object in order to test each of its methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, in order to test the &lt;code&gt;fullName&lt;/code&gt; code that lives inside the &lt;code&gt;createAuthorObject&lt;/code&gt; function, we are required to instantiate an author object:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var author =  createAuthorObject(&quot;Isaac&quot;, &quot;Asimov&quot;, 500);

author.fullName() === &quot;Isaac Asimov&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this simplistic scenario, it is not a big pain (only loading unnecessarily the code for &lt;code&gt;isProlific&lt;/code&gt;),
but in a real world situation, instantiating an object might involve lots of unnecessary steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the DO version, where &lt;code&gt;createAuthorData&lt;/code&gt; and &lt;code&gt;fullName&lt;/code&gt; are separate, we are free to create the data to be passed to &lt;code&gt;fullName&lt;/code&gt; as we want and test &lt;code&gt;fullName&lt;/code&gt; in isolation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;fullName({firstName: &quot;Isaac&quot;, lastName: &quot;Asimov&quot;}) === &quot;Isaac Asimov&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we choose to use classes, we only need to instantiate a data object. The code for &lt;code&gt;isProlific&lt;/code&gt; doesn&amp;#8217;t have to be loaded in order to test &lt;code&gt;fullName&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;var data =  new AuthorData(&quot;Isaac&quot;, &quot;Asimov&quot;);

NameCalculation.fullName(data) === &quot;Isaac Asimov&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second benefit of separating code and data is that it&amp;#8217;s easier to write tests for our code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-3-systems-tend-to-be-less-complex&quot;&gt;Benefit #3: Systems tend to be less complex&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The third and last benefit of applying Principle #1 is that systems tend to be less complex.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This benefit is the deepest one but also the one that is the hardest (for me) to explain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The type of complexity I refer to is the one which makes large systems hard to understand as it is defined in the beautiful paper &lt;a href=&quot;https://github.com/papers-we-love/papers-we-love/blob/master/design/out-of-the-tar-pit.pdf&quot;&gt;Out of the Tar Pit&lt;/a&gt;.
It has nothing to do with the complexity of the resources consumed by a program.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, when we refer to simplicity, we mean &quot;not complex&quot;, in other words easy to understand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Keep in mind that complexity and simplicity (like hard and easy) are not absolute but relative concepts.
We can compare the complexity of two systems and argue that system A is more complex (or simpler) than system B.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When code and data reside in separate entities, the system is easier to understand for two reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Entities are split into disjoint groups: code and data. Therefore entities have less relations with other entitites.&lt;/div&gt;
&lt;p&gt;Let me illustrate this insight on a class diagram of a Library management system, where code and data are mixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lib-mgmt-class-diagram-overview&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/complex-class-relation.png&quot; alt=&quot;complex class relation&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. A class diagram overview for a Library management system&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is not required to know the details of the classes to notice that this diagram represent a system that is complex in the sense that it is hard to understand.
The system is hard to understand because there are many dependencies between the entities that compose the system.
The most complex node of the system is the Librarian entity which is connected via 7 edges to other nodes.
Part of the edges are data edges (association and composition) and part of the edges are code edges (inheritance and dependency).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, if we split each class of this system in a code entity and a data entity &lt;em&gt;without making any other modification to the system&lt;/em&gt; the diagram of the system is split into two disjoint parts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The left part is made only of data entities and data edges: association and composition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The right part is made only of code entities and code edges: dependency and inheritance&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;lib-mgmt-simplified-class-diagram&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/data-code-relation.png&quot; alt=&quot;data code relation&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. A class diagram where every class is split into code and data entities&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The resulting system is definitely simpler. I am not sure if there is a formal metric of the complexity of a system that could make tangible what I mean by simpler, but my informal understanding is that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
A system made of disjoint simple parts is less complex than a system made of a single complex part.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One could argue that the complexity of the system where code and data are mixed is due to a bad design and data an experienced OO developer would have designed a simpler system, leveraging smart design patterns.
That&amp;#8217;s true, but in a sense it&amp;#8217;s irrelevant. The point I am trying to make here is that a system made of entities that do not combine code and data &lt;em&gt;tends&lt;/em&gt; to be simpler that a system made of entities that combine code and data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has been said many times that &quot;Simplicity is hard&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My claim is that simplicity is easier to achieve when we separate code and data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;price-for-principle-1&quot;&gt;Price for Principle #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are no free meals. Applying Principle #1 comes at a price.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The price we have to pay in order to benefit from the separation between code and data is that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;There is no control on what code access what data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No packaging&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our systems are made from more entities&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-1-there-is-no-control-on-what-code-access-what-data&quot;&gt;Price #1: There is no control on what code access what data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When code and data are mixed, one can easily understand what are the pieces of code that access a piece of data.
The reason is that the data is encapsulated in an object. It gives us the guaranty that the data is accessible only by the object&amp;#8217;s methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DO, data stands on its own. It is transparent if you want. As a consequence, it can be accessed by any piece of code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we want to refactor the shape of our data,
we need to be very careful and make sure that we have found all the places in our code that access the data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Without the application of &lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Principle #3&lt;/a&gt; that enforces data immutability,
the fact that the data is accessible by any piece of code would be really unsafe as it would be very hard to guarantee the validity of our data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-2-no-packaging&quot;&gt;Price #2: No packaging&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the benefits of OOP is that when you have an object in hand,
it&amp;#8217;s a package that contains both the code (via methods) and the data (via members).
As a consequence, as a developer it&amp;#8217;s really easy to discover what are the various ways to manipulate the data: you look at the methods of the class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DO, the code that manipulate the data could be everywhere. For example, &lt;code&gt;createAuthorData&lt;/code&gt; could be in a file and &lt;code&gt;fullName&lt;/code&gt; in another file. It makes it difficult for developers to discover that the &lt;code&gt;fullName&lt;/code&gt; function is available. In some situations, it could lead to waste of time and unnecessary code duplication.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;price-3-our-systems-are-made-from-more-entities&quot;&gt;Price #3: Our systems are made from more entities&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s do simple arithmetic. Imagine a system made of N classes that combine code and data. When you split the separate code and data, you get a system made of 2N entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s not accurate, because usually when you separate code and data, the class hierarchy tends to get simpler. Therefore the number of classes in the resulting system will probably be lower than 2N.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On one hand, the entities are simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, we have more entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Depending on the situation, you might prefer one or the other.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DO guides us to separate code from data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we adhere to this principle, our code can be reused in different contexts and tested in isolation and our systems tend to be made of simpler parts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This separation reduces the control we have on what pieces of code access our data and could cause our systems to be made of more entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Continue your exploration of &lt;a href=&quot;/databook/2020/09/29/do-principles.html&quot;&gt;Data Oriented Programming principles&lt;/a&gt; and move to &lt;a href=&quot;/databook/2020/10/02/generic-data-structures.html&quot;&gt;Principle #2: Model entities with generic data structures&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published.</summary></entry><entry><title type="html">Principles of Data Oriented Programming</title><link href="https://blog.klipse.tech//databook/2020/09/29/do-principles.html" rel="alternate" type="text/html" title="Principles of Data Oriented Programming" /><published>2020-09-29T03:31:24+00:00</published><updated>2020-09-29T03:31:24+00:00</updated><id>https://blog.klipse.tech//databook/2020/09/29/do-principles</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/09/29/do-principles.html">&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This chapter is an attempt to illustrate what are the core principles of Data Oriented Programming as I understand them.
It is highly influenced by my programming experience in Clojure, but I believe that those principles are language agnostic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One could adhere to them in an Object Oriented (OO) language like Java or C# and one could break them
in a Functional Programming (FP) language like Ocaml, Haskell, JavaScript (or even in Clojure).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact, in this chapter, I am going to illustrate how those principles could be applied or broken
in JavaScript, a programming language that supports both FP and OOP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The principles of Data Oriented (DO) Programming are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/separate-code-data.html&quot;&gt;Separate code from data&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/generic-data-structures.html&quot;&gt;Model entities with generic data structures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/immutable-data.html&quot;&gt;Data is immutable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/02/data-comparable-value.html&quot;&gt;Data is comparable by value&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/10/03/data-literal.html&quot;&gt;Data has a literal representation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each principle is explored in a separate article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I encourage you to start your exploration from &lt;a href=&quot;/databook/2020/10/02/separate-code-data.html&quot;&gt;Principle #1: Separate code from data&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published.</summary></entry><entry><title type="html">Data Oriented Programming: Table of Contents</title><link href="https://blog.klipse.tech//databook/2020/09/27/data-book-toc.html" rel="alternate" type="text/html" title="Data Oriented Programming: Table of Contents" /><published>2020-09-27T00:45:32+00:00</published><updated>2020-09-27T00:45:32+00:00</updated><id>https://blog.klipse.tech//databook/2020/09/27/data-book-toc</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/09/27/data-book-toc.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;before-we-start&quot;&gt;Before we start&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/09/25/data-book-chap0.html&quot;&gt;What is Data Oriented Programming&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;part-1-design-a-data-oriented-system&quot;&gt;Part 1: Design a Data Oriented system&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/09/25/data-book-chap1-part1.html&quot;&gt;The complexity of Object Oriented programming&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2020/09/29/do-principles.html&quot;&gt;Principles of Data Oriented programming&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Polymorphism without objects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assess the quality of your data model&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;part-2-implement-a-data-oriented-system&quot;&gt;Part 2: Implement a Data Oriented system&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;State management in an immutable world&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data manipulation kills bugs in the egg&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The data manipulation tool set in action&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write unit tests without mocking&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Debug your program without a debugger&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;part-3-evolve-a-data-oriented-system&quot;&gt;Part 3: Evolve a Data Oriented system&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Write your own data manipulation tool set&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extend the primitive data types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specify the shape of your data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write unit tests that cover every possible data combination with property based testing&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Are you now motivated to discover the DO world?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Start reading the &lt;a href=&quot;/databook/2020/09/25/data-book-chap0.html&quot;&gt;introduction&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published.</summary></entry><entry><title type="html">The complexity of Object Oriented Programming: Classic OO design</title><link href="https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part1.html" rel="alternate" type="text/html" title="The complexity of Object Oriented Programming: Classic OO design" /><published>2020-09-25T05:45:32+00:00</published><updated>2020-09-25T05:45:32+00:00</updated><id>https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part1</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part1.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;/databook/2020/09/25/data-book-chap1-part1.html&quot;&gt;introduction&lt;/a&gt;, we discussed how Data Oriented Programming differs from Object Oriented (OO) Programming and from Functional Programming (FP).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this chapter, we explore the tendency of OO systems to be complex.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This complexity is not related to the syntax or the semantics of a specific OO language. It is something that is inherent to OO fundamental insight that programs should be composed from objects that consist of some state together with methods for accessing and manipulating that state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this chapter, we illustrate how some core aspects of OO tend to increase the complexity of OO systems.&lt;/p&gt;
&lt;/div&gt;
&lt;table id=&quot;oo-increases-compplexity&quot; class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Aspects of Object Oriented programming and their impact on complexity&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Aspect&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Impact on complexity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Code and data are mixed&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Classes tend to be involved in many relations&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Objects are mutable&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Extra thinking when reading code that involves state mutation&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Objects are mutable&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Explicit synchronization on multi-threaded environments&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Data is locked in objects&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Data serialization is a nightmare&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Code is locked in classes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Class hierarchies are complex&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the years, OO ecosystems have alleviated this complexity increase by adding new features to the language (e.g. anonymous classes and anonymous functions) and by developing frameworks that hide part of this complexity by providing a simpler interface to the developers (e.g. Spring and Jackson in Java). Internally, they rely on advanced features of the language (like reflection and custom annotations).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This chapter is not meant to be read as a critics of OO programming. Its purpose is to increase your awareness about the complexity of OO as a programming paradigm.
I hope that after reading this chapter, you will be motivated to discover a different programming paradigm where this complexity tend to be less present, namely Data Oriented programming.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;oo-design-classic-or-classical&quot;&gt;OO design: classic or classical?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s Monday morning 9:00 AM, you seat at a coffee shop with a potential customer, Nancy, that needs you to build a new library management system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;What&amp;#8217;s a library management system in your mind?&quot; you ask.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;It&amp;#8217;s a system that handles housekeeping functions of a library, mainly around the book collection
and the library members&quot; Nancy replies&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Could you be a little bit more precise?&quot; you ask politely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Sure&quot; Nancy answers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;She grabs the napkin under her coffee mug and she writes down a couple of bullet points on the napkin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;. Two kinds of users: library members and librarians
. Users log in to the system via email and password.
. Members can borrow books
. Members and librarians can search books by title or by author
. Librarians can block and unblock members (e.g. when they are late in returning a book)
. Librarians can list the books currently lent by a member
. There could be several copies of a book&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Well, that&amp;#8217;s pretty clear.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;When will you be able to deliver it?&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;If you give me a down payment today, I should be able to deliver it by next Wednesday.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Fantastic! I&amp;#8217;ll make you a bitcoin transfer later today.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You get back to your office with Nancy&amp;#8217;s napkin in your pocket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before rushing to your laptop to code the system,
you grab a sheet of paper - slightly bigger than the napkin - and you prepare yourself to draw the UML class diagram of the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Everything is life is an object and every object is made from a class. Right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the main classes that you identify for the library management system:&lt;/p&gt;
&lt;/div&gt;
* `Library`: The central part for which the system is designed
* `Book`: A book
* `BookItem`: A book can have multiple copies, each copy is considered as a book item
* `BookLending`: When a book is lent, a book lending object is created
* `Member`: A member of the library
* `Librarian`: A librarian
* `User`: A base class for `Librarian` and `Member`
* `Catalog`: Contains list of books
* `Author`: A book author
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That was the easy part. Now comes the difficult part: the relationships between the classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After two hours or so, you come up with a first draft of a design for the
library management system. It looks like the diagram shown on &lt;a href=&quot;#lib-mgmt-class-diagram&quot;&gt;A class diagram for a Library management system&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lib-mgmt-class-diagram&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/class-diagram-lms.png&quot; alt=&quot;class diagram lms&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. A class diagram for a Library management system&lt;/div&gt;
&lt;/div&gt;
This design is meant to be very simple and by no means it pretends to cover all the features of the system.
This design serves two purposes:

. For you - the developer - it is rich enough to start coding
. For me - the author of the book - it is rich enough to illustrate the complexity of a typical OO system
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You feel proud of yourself and of the design you produced. You definitely deserve a cup of coffee.
Near the coffee machine, you meet Dave, a junior software developer that you appreciate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hey Dave! How are you doing?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trying to fix a bug in my code: I cannot understand why the state of my objects always change! You?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I have just finished the design of a system for a new customer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cool! Can you show me your design?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Are you curious to discover Dave&amp;#8217;s reaction to your design?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read the &lt;a href=&quot;/databook/2020/09/25/data-book-chap1-part2.html&quot;&gt;next part&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published.</summary></entry><entry><title type="html">What is Data Oriented Programming?</title><link href="https://blog.klipse.tech//databook/2020/09/25/data-book-chap0.html" rel="alternate" type="text/html" title="What is Data Oriented Programming?" /><published>2020-09-25T05:45:32+00:00</published><updated>2020-09-25T05:45:32+00:00</updated><id>https://blog.klipse.tech//databook/2020/09/25/data-book-chap0</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/09/25/data-book-chap0.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-essence-of-do&quot;&gt;The essence of DO&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This part serves as an introduction and motivation for learning Data Oriented programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On one hand, Data Oriented (DO) programming is simple and natural. On the other hand, it is not usually taught in books and schools and most software developers are not well acquainted with it.
In order to learn DO properly, you&amp;#8217;ll need first to &lt;em&gt;unlearn&lt;/em&gt; the programming paradigms you are already used to.
Unlearning requires quite an effort. Before doing this effort, you need to be strongly motivated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DO is a profound concept whose essence is not easy to define in words.  It reminds me the first sentence from the ancient Chinese wisdom book &quot;Tao Te Ching&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Tao that can be spoken of is not the Tao
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Tao is a Chinese word usually translated as the path. It refers to the main principle of wisdom taught in the book.
What this sentence says is that when you try to explain what the Tao is, using words, you miss the point. The purpose of the &quot;Tao Te Ching&quot; is to illustrate what the Tao is using examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, the purpose of our book is to illustrate what is DO. After reading the book, you will know what is DO without the need for an abstract definition of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a starting point for our journey in the world of DO, we are going to compare DO with a programming paradigm that differs a lot from it: Object Oriented (OO) programming.
At the end of this chapter, we will refine what DO is about by comparing it with a programming paradigm that is much closer to it: Functional programming (FP).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;oo-vs-do&quot;&gt;OO vs DO&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Object Oriented (OO) programming, we model our domain using &lt;em&gt;objects&lt;/em&gt;, that consist of some state together with methods for accessing and manipulating that state. The blueprint of the objects is defined in &lt;em&gt;classes&lt;/em&gt;. We create a class per domain entity type. A method of a class can be used only on objects instantiated from this class. We say that the methods are &lt;em&gt;specific&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Data Oriented programming, we model our domain using &lt;em&gt;data collections&lt;/em&gt;, that consist of immutable data. We manipulate the data via functions that could work with any data collection. We say that the functions are &lt;em&gt;generic&lt;/em&gt;: they work for any data, no matter what the data represent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two main things that DO considers a program should avoid:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mutation of data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The coupling of code and data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most OO developers take those two things for granted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will try to explain these two things tend to make our programs more complex than they should be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a programming paradigm allows data to be mutated, developers have to add mechanisms to protect their data. For instance, when we pass a piece of data (encapsulated in an object or in a hash map) to a function, we can never be 100% sure that the function won&amp;#8217;t modify our data. In multi-threaded systems, we need all kind of mutexes to prevent other threads to change data at an unexpected time. Mutexes make our code more complicated and cause performance hit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Object oriented programming has educated us over the years to model the world with objects. Every piece of information should be encapsulated in objects instantiated from classes: we have classes for business entities like customers and products and also for universal programming concepts like dates. In OO, there is no way to aggregate pieces of information without creating a class.  When data is encapsulated in an object it looses its transparency: we can no longer easily inspect the data or serialize it in a generic way (without writing custom code or using reflection).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The basic entities of the DO are immutable collections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By collection, we mean something like a dictionary where keys are mainly strings and values are either primitive types or collections. By immutable, we mean that the collections cannot be mutated in place unlike hash maps (or dictionaries) in most programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;Listing-Customer&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A simple representation of a customer&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;
 &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;John Smith&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;email&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;john@smith.com&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;numberOfPurchases&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #009999&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;Listing-Product&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A simple representation of a product&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;
 &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;iPhone 10&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;product-234&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;category&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;Electronics&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;price&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #009999&quot;&gt;1000&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;Listing-Order&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A simple representation of an order&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;
 &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;products&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;product-001&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;product-234&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;],&lt;/span&gt;
 &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;totalAmount&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #009999&quot;&gt;200&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;customer&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;customer-id-345&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Immutable collections have 3 important properties:
* They are immutable
* They don&amp;#8217;t require a blueprint to instantiated from
* They can be manipulated with generic functions&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The DO approach guides us to think about data as value. Values never changes. Think about the number 42.  The value of the number 42 will forever stay 42, even when we add to it 10! In the Data Oriented world, the same is true for collections. A collection never changes and that&amp;#8217;s good news for our programs. Inside programs that follow the DO immutability paradigm , collections are manipulated with the same simplicity as we manipulate numbers in any programming language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of creating classes to model the world, we use universal data collections. Customers, products, orders etc&amp;#8230;&amp;#8203; are all represented as dictionaries with keys and values. The difference between them is that the keys have different names and the values are not of the same type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Collections are universal. Therefore, we can write functions that manipulate collections without concrete knowledge of the entity that is represented by the collection. For instance, we can write a function that validates the email address field of a collection and pass to this function a customer collection and the name of the field that contains the email address.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We could also change the name of a field in a collection (e.g. renaming &lt;code&gt;email&lt;/code&gt; to &lt;code&gt;emailAddress&lt;/code&gt;) in a generic way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Compare this flexibility with the rigidity of Object Oriented programming where in order to manipulate an object, you have to be aware of the class of the object (unless you use reflection).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;do-vs-fp&quot;&gt;DO vs FP&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have heard about Functional Programming (FP), this might sound familiar to your. Indeed DO and FP share common aspects but they are not the same.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simplifying a bit, we could say that the two sacred paradigms of OO are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Write code as methods inside classes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encapsulate data as members inside classes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a sense, functional programming (FP) is a rebellion against OO first sacred paradigm. FP encourages us to write code inside functions that are not locked in objects. In addition to that, FP treats functions as first class citizens: we are allowed to pass functions as arguments to other functions and to write functions that return functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, we could say that Data oriented (DO) is a rebellion against OO second sacred paradigm. DO encourages us to represent data without the need to specify its shape in advance. In addition to that, DO treats data as an immutable value and as a first class citizen (e.g. we are allowed to inspect the fields of a collection programmatically).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are programming languages that embrace FP without embracing DO (e.g. Haskell, Ocaml). In those languages, the shape of the data is rigid and needs to be specified at compile time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most programming languages that embrace DO also embrace FP (e.g. Clojure, JavaScript). However, considering functions as first class citizens is not required by OO. In fact, it is possible to apply DO main principles to OO programming languages, by adhering to the following guidelines:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Model business entities with immutable data structures (there exists implementation in most languages)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write code mainly in static methods that manipulate those immutable data structures&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Are you now motivated to discover the DO world?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Move to &lt;a href=&quot;/databook/2020/09/25/data-book-chap1-part1.html&quot;&gt;Chapter 1&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published.</summary></entry></feed>