<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://blog.klipse.tech//feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.klipse.tech//" rel="alternate" type="text/html" /><updated>2020-09-26T18:16:35+00:00</updated><id>https://blog.klipse.tech//feed.xml</id><title type="html">An interactive journey into functional programming with Yehonathan Sharvit</title><subtitle>A journey into functional programming wonders: Clojure, Clojurescript, javascript and ruby. Live Repl. Live Coding. gist. dynamic code. Interactive Code Snippets.
</subtitle><author><name>Yehonathan Sharvit</name></author><entry><title type="html">The complexity of Object Oriented Programming: Classic OO design</title><link href="https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part1.html" rel="alternate" type="text/html" title="The complexity of Object Oriented Programming: Classic OO design" /><published>2020-09-25T05:45:32+00:00</published><updated>2020-09-25T05:45:32+00:00</updated><id>https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part1</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part1.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;/databook/2020/09/25/data-book-chap1-part1.html&quot;&gt;introduction&lt;/a&gt;, we discussed how Data Oriented Programming differs from Object Oriented (OO) Programming and from Functional Programming (FP).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this chapter, we explore the tendency of OO systems to be complex.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This complexity is not related to the syntax or the semantics of a specific OO language. It is something that is inherent to OO fundamental insight that programs should be composed from objects that consist of some state together with methods for accessing and manipulating that state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this chapter, we illustrate how some core aspects of OO tend to increase the complexity of OO systems.&lt;/p&gt;
&lt;/div&gt;
&lt;table id=&quot;oo-increases-compplexity&quot; class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Aspects of Object Oriented programming and their impact on complexity&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Aspect&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Impact on complexity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Code and data are mixed&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Classes tend to be involved in many relations&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Objects are mutable&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Extra thinking when reading code that involves state mutation&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Objects are mutable&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Explicit synchronization on multi-threaded environments&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Data is locked in objects&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Data serialization is a nightmare&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Code is locked in classes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Class hierarchies are complex&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the years, OO ecosystems have alleviated this complexity increase by adding new features to the language (e.g. anonymous classes and anonymous functions) and by developing frameworks that hide part of this complexity by providing a simpler interface to the developers (e.g. Spring and Jackson in Java). Internally, they rely on advanced features of the language (like reflection and custom annotations).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This chapter is not meant to be read as a critics of OO programming. Its purpose is to increase your awareness about the complexity of OO as a programming paradigm.
I hope that after reading this chapter, you will be motivated to discover a different programming paradigm where this complexity tend to be less present, namely Data Oriented programming.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;oo-design-classic-or-classical&quot;&gt;OO design: classic or classical?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s Monday morning 9:00 AM, you seat at a coffee shop with a potential customer, Nancy, that needs you to build a new library management system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;What&amp;#8217;s a library management system in your mind?&quot; you ask.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;It&amp;#8217;s a system that handles housekeeping functions of a library, mainly around the book collection
and the library members&quot; Nancy replies&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Could you be a little bit more precise?&quot; you ask politely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Sure&quot; Nancy answers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;She grabs the napkin under her coffee mug and she writes down a couple of bullet points on the napkin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;. Two kinds of users: library members and librarians
. Users log in to the system via email and password.
. Members can borrow books
. Members and librarians can search books by title or by author
. Librarians can block and unblock members (e.g. when they are late in returning a book)
. Librarians can list the books currently lent by a member
. There could be several copies of a book&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Well, that&amp;#8217;s pretty clear.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;When will you be able to deliver it?&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;If you give me a down payment today, I should be able to deliver it by next Wednesday.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Fantastic! I&amp;#8217;ll make you a bitcoin transfer later today.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You get back to your office with Nancy&amp;#8217;s napkin in your pocket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before rushing to your laptop to code the system,
you grab a sheet of paper - slightly bigger than the napkin - and you prepare yourself to draw the UML class diagram of the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Everything is life is an object and every object is made from a class. Right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the main classes that you identify for the library management system:&lt;/p&gt;
&lt;/div&gt;
* `Library`: The central part for which the system is designed
* `Book`: A book
* `BookItem`: A book can have multiple copies, each copy is considered as a book item
* `BookLending`: When a book is lent, a book lending object is created
* `Member`: A member of the library
* `Librarian`: A librarian
* `User`: A base class for `Librarian` and `Member`
* `Catalog`: Contains list of books
* `Author`: A book author
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That was the easy part. Now comes the difficult part: the relationships between the classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After two hours or so, you come up with a first draft of a design for the
library management system. It looks like the diagram shown on &lt;a href=&quot;#lib-mgmt-class-diagram&quot;&gt;A class diagram for a Library management system&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lib-mgmt-class-diagram&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/class-diagram-lms.png&quot; alt=&quot;class diagram lms&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. A class diagram for a Library management system&lt;/div&gt;
&lt;/div&gt;
This design is meant to be very simple and by no means it pretends to cover all the features of the system.
This design serves two purposes:

. For you - the developer - it is rich enough to start coding
. For me - the author of the book - it is rich enough to illustrate the complexity of a typical OO system
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You feel proud of yourself and of the design you produced. You definitely deserve a cup of coffee.
Near the coffee machine, you meet Dave, a junior software developer that you appreciate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hey Dave! How are you doing?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trying to fix a bug in my code: I cannot understand why the state of my objects always change! You?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I have just finished the design of a system for a new customer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cool! Can you show me your design?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Are you curious to discover Dave&amp;#8217;s reaction to your design?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read the &lt;a href=&quot;/databook/2020/09/25/data-book-chap1-part2.html&quot;&gt;next part&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published.</summary></entry><entry><title type="html">What is Data Oriented Programming?</title><link href="https://blog.klipse.tech//databook/2020/09/25/data-book-chap0.html" rel="alternate" type="text/html" title="What is Data Oriented Programming?" /><published>2020-09-25T05:45:32+00:00</published><updated>2020-09-25T05:45:32+00:00</updated><id>https://blog.klipse.tech//databook/2020/09/25/data-book-chap0</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/09/25/data-book-chap0.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-essence-of-do&quot;&gt;The essence of DO&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This part serves as an introduction and motivation for learning Data Oriented programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On one hand, Data Oriented (DO) programming is simple and natural. On the other hand, it is not usually taught in books and schools and most software developers are not well acquainted with it.
In order to learn DO properly, you&amp;#8217;ll need first to &lt;em&gt;unlearn&lt;/em&gt; the programming paradigms you are already used to.
Unlearning requires quite an effort. Before doing this effort, you need to be strongly motivated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DO is a profound concept whose essence is not easy to define in words.  It reminds me the first sentence from the ancient Chinese wisdom book &quot;Tao Te Ching&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Tao that can be spoken of is not the Tao
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Tao is a Chinese word usually translated as the path. It refers to the main principle of wisdom taught in the book.
What this sentence says is that when you try to explain what the Tao is, using words, you miss the point. The purpose of the &quot;Tao Te Ching&quot; is to illustrate what the Tao is using examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, the purpose of our book is to illustrate what is DO. After reading the book, you will know what is DO without the need for an abstract definition of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a starting point for our journey in the world of DO, we are going to compare DO with a programming paradigm that differs a lot from it: Object Oriented (OO) programming.
At the end of this chapter, we will refine what DO is about by comparing it with a programming paradigm that is much closer to it: Functional programming (FP).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;oo-vs-do&quot;&gt;OO vs DO&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Object Oriented (OO) programming, we model our domain using &lt;em&gt;objects&lt;/em&gt;, that consist of some state together with methods for accessing and manipulating that state. The blueprint of the objects is defined in &lt;em&gt;classes&lt;/em&gt;. We create a class per domain entity type. A method of a class can be used only on objects instantiated from this class. We say that the methods are &lt;em&gt;specific&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Data Oriented programming, we model our domain using &lt;em&gt;data collections&lt;/em&gt;, that consist of immutable data. We manipulate the data via functions that could work with any data collection. We say that the functions are &lt;em&gt;generic&lt;/em&gt;: they work for any data, no matter what the data represent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two main things that DO considers a program should avoid:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mutation of data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The coupling of code and data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most OO developers take those two things for granted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will try to explain these two things tend to make our programs more complex than they should be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a programming paradigm allows data to be mutated, developers have to add mechanisms to protect their data. For instance, when we pass a piece of data (encapsulated in an object or in a hash map) to a function, we can never be 100% sure that the function won&amp;#8217;t modify our data. In multi-threaded systems, we need all kind of mutexes to prevent other threads to change data at an unexpected time. Mutexes make our code more complicated and cause performance hit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Object oriented programming has educated us over the years to model the world with objects. Every piece of information should be encapsulated in objects instantiated from classes: we have classes for business entities like customers and products and also for universal programming concepts like dates. In OO, there is no way to aggregate pieces of information without creating a class.  When data is encapsulated in an object it looses its transparency: we can no longer easily inspect the data or serialize it in a generic way (without writing custom code or using reflection).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The basic entities of the DO are immutable collections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By collection, we mean something like a dictionary where keys are mainly strings and values are either primitive types or collections. By immutable, we mean that the collections cannot be mutated in place unlike hash maps (or dictionaries) in most programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;Listing-Customer&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A simple representation of a customer&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;
 &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;John Smith&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;email&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;john@smith.com&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;numberOfPurchases&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #009999&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;Listing-Product&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A simple representation of a product&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;
 &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;name&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;iPhone 10&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;product-234&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;category&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;Electronics&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;price&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #009999&quot;&gt;1000&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;Listing-Order&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A simple representation of an order&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;
 &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;products&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;product-001&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;product-234&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;],&lt;/span&gt;
 &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;totalAmount&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #009999&quot;&gt;200&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;
 &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;customer&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;customer-id-345&lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;&lt;/span&gt;
&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Immutable collections have 3 important properties:
* They are immutable
* They don&amp;#8217;t require a blueprint to instantiated from
* They can be manipulated with generic functions&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The DO approach guides us to think about data as value. Values never changes. Think about the number 42.  The value of the number 42 will forever stay 42, even when we add to it 10! In the Data Oriented world, the same is true for collections. A collection never changes and that&amp;#8217;s good news for our programs. Inside programs that follow the DO immutability paradigm , collections are manipulated with the same simplicity as we manipulate numbers in any programming language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of creating classes to model the world, we use universal data collections. Customers, products, orders etc&amp;#8230;&amp;#8203; are all represented as dictionaries with keys and values. The difference between them is that the keys have different names and the values are not of the same type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Collections are universal. Therefore, we can write functions that manipulate collections without concrete knowledge of the entity that is represented by the collection. For instance, we can write a function that validates the email address field of a collection and pass to this function a customer collection and the name of the field that contains the email address.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We could also change the name of a field in a collection (e.g. renaming &lt;code&gt;email&lt;/code&gt; to &lt;code&gt;emailAddress&lt;/code&gt;) in a generic way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Compare this flexibility with the rigidity of Object Oriented programming where in order to manipulate an object, you have to be aware of the class of the object (unless you use reflection).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;do-vs-fp&quot;&gt;DO vs FP&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have heard about Functional Programming (FP), this might sound familiar to your. Indeed DO and FP share common aspects but they are not the same.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simplifying a bit, we could say that the two sacred paradigms of OO are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Write code as methods inside classes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encapsulate data as members inside classes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a sense, functional programming (FP) is a rebellion against OO first sacred paradigm. FP encourages us to write code inside functions that are not locked in objects. In addition to that, FP treats functions as first class citizens: we are allowed to pass functions as arguments to other functions and to write functions that return functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, we could say that Data oriented (DO) is a rebellion against OO second sacred paradigm. DO encourages us to represent data without the need to specify its shape in advance. In addition to that, DO treats data as an immutable value and as a first class citizen (e.g. we are allowed to inspect the fields of a collection programmatically).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are programming languages that embrace FP without embracing DO (e.g. Haskell, Ocaml). In those languages, the shape of the data is rigid and needs to be specified at compile time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most programming languages that embrace DO also embrace FP (e.g. Clojure, JavaScript). However, considering functions as first class citizens is not required by OO. In fact, it is possible to apply DO main principles to OO programming languages, by adhering to the following guidelines:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Model business entities with immutable data structures (there exists implementation in most languages)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write code mainly in static methods that manipulate those immutable data structures&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Are you now motivated to discover the DO world?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Move to &lt;a href=&quot;/databook/2020/09/25/data-book-chap1-part1.html&quot;&gt;Chapter 1&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published.</summary></entry><entry><title type="html">The complexity of Object Oriented Programming: A bit of UML</title><link href="https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part2.html" rel="alternate" type="text/html" title="The complexity of Object Oriented Programming: A bit of UML" /><published>2020-09-25T04:45:32+00:00</published><updated>2020-09-25T04:45:32+00:00</updated><id>https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part2</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part2.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;/databook/2020/09/25/data-book-chap1-part1.html&quot;&gt;previous part&lt;/a&gt;, we presented a possible OO design for a library management system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this part, we continue our exploration of the tendency of OO systems to be complex.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;daves-reaction-to-your-design&quot;&gt;Dave's reaction to your design&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave follows you to your desk and you show him your piece of art: the UML diagram.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Wow! Such a detailed class diagram.&quot; Dave is really excited.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Yeah. It&amp;#8217;s pretty neat.&quot; You reply proudly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;The thing is that I can never remember the meaning of each arrow&quot; Dave admits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;There are 4 types of arrows in my class diagram: composition, association, inheritance and usage&quot;, you reply with a feeling of superiority.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;What&amp;#8217;s the difference between composition and association?&quot;, Dave asks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You google &quot;composition vs association&quot; and you read loudly to Dave:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;It&amp;#8217;s all about whether the objects can live one without each other:
with &lt;strong&gt;composition&lt;/strong&gt;, when one object dies, the other one dies also,
while in an &lt;strong&gt;association&lt;/strong&gt; relation, each object has an independent life.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my class diagram, there are two kinds of &lt;strong&gt;composition&lt;/strong&gt; relation,
symbolized by an arrow with a plain diamond at one edge, and an optional star at
the other edge:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;Library&lt;/code&gt; owns a &lt;code&gt;Catalog&lt;/code&gt;. That&amp;#8217;s a one-to-one composition relation: if a &lt;code&gt;Library&lt;/code&gt; object
dies, then its &lt;code&gt;Catalog&lt;/code&gt; object dies with it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;Library&lt;/code&gt; owns many &lt;code&gt;Member&lt;/code&gt;s. That&amp;#8217;s a one-to-many composition relation: if a &lt;code&gt;Library&lt;/code&gt; object
dies, then all its &lt;code&gt;Member&lt;/code&gt; objects die with it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&quot;composition-diagram&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/composition.png&quot; alt=&quot;composition&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Two kinds of composition: one to one and one to many. In both cases, when an object dies, the composed object dies with it.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Do you have association relations in your diagram?&quot; Dave asks&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Yeap. Take a look at the arrow between &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt;.
It has an empty diamond and a start at both edges: it&amp;#8217;s a many to many association relation&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Indeed, a book can be written by multiple authors
and an author can write multiplet books.
Moreover, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt; objects can live independently.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;association-diagram&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/association.png&quot; alt=&quot;association&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Many to many association relation: each object lives independently&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;I see also many dashed arrows in your diagram&quot;, Dave notices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Dashed arrows are for &lt;strong&gt;usage&lt;/strong&gt; relations: when a class uses a method of another class.
Consider for example, at the &lt;code&gt;Librarian::blockMember()&lt;/code&gt; method. It calls &lt;code&gt;Member::block()&lt;/code&gt;.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;usage-diagram&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/usage.png&quot; alt=&quot;usage&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Usage relation: a class uses a method of another class&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;I see. And I guess that plain arrows - like the one between &lt;code&gt;Member&lt;/code&gt; and &lt;code&gt;User&lt;/code&gt; - represent inheritance.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Absolutely&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;inheritance-diagram&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/inheritance.png&quot; alt=&quot;inheritance&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Inheritance relation: a class derives from another class&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Great! Now that I understand the meaning of each kind of arrow.
&quot;Where should I look first?&quot; Dave asks&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;I think you should start from &lt;code&gt;Library&lt;/code&gt;.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;library-diagram&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/library.png&quot; alt=&quot;library&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. The &lt;code&gt;Library&lt;/code&gt; class&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In terms of code, a &lt;code&gt;Library&lt;/code&gt; object does nothing on its own, it delegates everything to objects it owns:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;It owns multiple &lt;code&gt;Member&lt;/code&gt; objects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It owns multiple &lt;code&gt;Librarian&lt;/code&gt; objects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It owns a single &lt;code&gt;Catalog&lt;/code&gt; object&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Looks pretty clear to me. What&amp;#8217;s next?&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;`Librarian` and &lt;code&gt;Member&lt;/code&gt; who both derive from &lt;code&gt;User&lt;/code&gt; &quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;user-diagram&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/user.png&quot; alt=&quot;user&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. &lt;code&gt;Librarian&lt;/code&gt; and &lt;code&gt;Member&lt;/code&gt; derive from &lt;code&gt;User&lt;/code&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;User&lt;/code&gt; class represents a user of the library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;In terms of data members, I stick to the bare minimum: it has a &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;
(I&amp;#8217;ll deal with security and encryption, later).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In terms of code, it can login via &lt;code&gt;login()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Member&lt;/code&gt; class represents a member of the library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;It derives from &lt;code&gt;User&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In terms of data members, it has nothing more than &lt;code&gt;User&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In terms of code, it can:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Checkout a book via &lt;code&gt;checkout()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return a book via &lt;code&gt;returnBook()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Answer if it is blocked via &lt;code&gt;isBlocked()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It owns multiple &lt;code&gt;BookLending&lt;/code&gt; objects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It uses &lt;code&gt;BookItem&lt;/code&gt; in order to implement &lt;code&gt;checkout()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Librarian&lt;/code&gt; class represents a librarian.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;It derives from &lt;code&gt;User&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In terms of data members, it has nothing more than &lt;code&gt;User&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In terms of code, it can:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Block and unblock a &lt;code&gt;Member&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List the book lendings of a member via &lt;code&gt;getBookLendings()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add book items to the library via &lt;code&gt;addBookItem()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It uses &lt;code&gt;Member&lt;/code&gt; in order to implement &lt;code&gt;blockMember()&lt;/code&gt;, &lt;code&gt;UnblockMember()&lt;/code&gt; and &lt;code&gt;getBookLendings()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It uses &lt;code&gt;BookItem&lt;/code&gt; in order to implement &lt;code&gt;checkout()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It uses &lt;code&gt;BookLending&lt;/code&gt; in order to implement &lt;code&gt;getBookLendings()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;What class should I look at now?&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;The &lt;code&gt;Catalog&lt;/code&gt; class who is responsible for the management of the books.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;catalog-diagram&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/catalog.png&quot; alt=&quot;catalog&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 7. The &lt;code&gt;Catalog&lt;/code&gt; class&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;div class=&quot;title&quot;&gt;In terms of code, a &lt;code&gt;Catalog&lt;/code&gt; object can:&lt;/div&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Search books via &lt;code&gt;search()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add book items to the library via &lt;code&gt;addBookItem()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;It owns multiple &lt;code&gt;Book&lt;/code&gt; objects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It uses &lt;code&gt;Librarian&lt;/code&gt; in order to implement &lt;code&gt;addBookItem&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Then we have the &lt;code&gt;Book&lt;/code&gt; class&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;book-diagram&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/book.png&quot; alt=&quot;book&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 8. The &lt;code&gt;Book&lt;/code&gt; class&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;In terms data members, we stick to the bare minimum: it has a &lt;code&gt;id&lt;/code&gt;, and a &lt;code&gt;title&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is associated with multiple &lt;code&gt;Author&lt;/code&gt; objects (A book might have multiple authors)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It owns multiple &lt;code&gt;BookItem&lt;/code&gt; objects, one for each copy of the book&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;What&amp;#8217;s a &lt;code&gt;BookItem&lt;/code&gt;?&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;The &lt;code&gt;BookItem&lt;/code&gt; class represents a book copy. A book could have many copies.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;In terms data members, we stick to the bare minimum: it has a &lt;code&gt;id&lt;/code&gt;, and a &lt;code&gt;rackId&lt;/code&gt; (for its physical location in the library)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In terms of code, it can be checked out via &lt;code&gt;checkout()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It owns multiple &lt;code&gt;BookLending&lt;/code&gt; objects, one for each time the book is lent&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Wow! That&amp;#8217;s amazing&quot; Dave compliments you. &quot;I didn&amp;#8217;t know people were
really spending time to write down their design in such details, before coding.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;I always do that. It saves me lots of coding errors&quot;, you reply proudly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;When will you start coding?&quot; Dave asks&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;When I finish my coffee&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You look at your coffee mug and it&amp;#8217;s full (and cold).
You were so excited to show your class diagram to Dave that you forgot to drink your coffee.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go and make yourself another cup of coffee before you move to the &lt;a href=&quot;/databook/2020/09/25/data-book-chap1-part3.html&quot;&gt;next part&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /></entry><entry><title type="html">The complexity of Object Oriented Programming: What’s wrong with you OO?</title><link href="https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part3.html" rel="alternate" type="text/html" title="The complexity of Object Oriented Programming: What's wrong with you OO?" /><published>2020-09-25T04:45:32+00:00</published><updated>2020-09-25T04:45:32+00:00</updated><id>https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part3</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part3.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;/databook/2020/09/25/data-book-chap1-part2.html&quot;&gt;previous part&lt;/a&gt;, you presented your design to Dave.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this part, we continue our exploration of the tendency of OO systems to be complex.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-wrong-with-you-oo&quot;&gt;What's wrong with you OO?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before you start coding, and while you prepare yourself another cup of coffee, I would like to
challenge your design. It might look beautiful and clear on the paper but, this design is too complex.
It&amp;#8217;s not that you picked the wrong classes
or that you misunderstood the relationships between the classes. It&amp;#8217;s much deeper.
It&amp;#8217;s about the programming paradigm you chose to implement the system.
It&amp;#8217;s about the Object Oriented paradigm. It&amp;#8217;s about OO.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
OO is too complex.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The purpose of this book is to present a much simpler programming paradigm called Data Oriented Programming (DO).
If you are already convinced that OO is too complex,
you can skip to the next chapter and start your journey into DO.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a skeptic about that, please keep reading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to DO, the main sources of complexity of your system - and of any OO system - are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Code and data are mixed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Objects are mutable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data is locked in objects as members&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code is locked into classes as methods&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this section, we are going to illustrate each of the above points in the context
of the library management system
and explain in what sense it is a source of complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;code-and-data-are-mixed&quot;&gt;Code and data are mixed&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One way to assess the complexity of a class diagram is to look only at the entities and their relationships
(ignoring members and methods) as in &lt;a href=&quot;#lib-mgmt-class-diagram-overview&quot;&gt;A class diagram overview for a Library management system&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Don&amp;#8217;t you think this diagram is too complex for such a simple system?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lib-mgmt-class-diagram-overview&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/complex-class-relation.png&quot; alt=&quot;complex class relation&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. A class diagram overview for a Library management system&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we design a system, no matter whether it&amp;#8217;s OO or DO,
we have to define the relationships between different pieces of code and data: that&amp;#8217;s unavoidable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In OO, code and data are mixed together in classes, data as members and code as methods.
From a system analysis perspective, the fact that code and data are mixed together makes the system complex
in the sense that entities tend to be involved in many relationships.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Take a look for instance at the &lt;code&gt;Member&lt;/code&gt; class in our class diagram &lt;a href=&quot;#lib-mgmt-class-diagram-overview&quot;&gt;A class diagram overview for a Library management system&lt;/a&gt;.
It is involved 5 relations: 2 data relations and 3 code relations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Data relations:&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Library&lt;/code&gt; has &lt;code&gt;Member&lt;/code&gt;s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Member&lt;/code&gt; has &lt;code&gt;BookLending&lt;/code&gt;s&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code relations:&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Member&lt;/code&gt; extends &lt;code&gt;User&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Librarian&lt;/code&gt; uses &lt;code&gt;Member&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Member&lt;/code&gt; uses &lt;code&gt;BookItem&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine for a moment that we were able somehow to split the &lt;code&gt;Member&lt;/code&gt; class into two separate entitites:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;MemberData&lt;/code&gt; for the data&lt;/div&gt;
&lt;p&gt;Instead of a &lt;code&gt;Member&lt;/code&gt; class with 5 relations, we would have as shown in &lt;a href=&quot;#lib-mgmt-member-split&quot;&gt;A class diagram where &lt;code&gt;Member&lt;/code&gt; is split into code and data entities&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;MemberCode&lt;/code&gt; entity with 3 relations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;MemberData&lt;/code&gt; entity with 2 relations&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&quot;lib-mgmt-member-split&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/member-code-data.png&quot; alt=&quot;member code data&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. A class diagram where &lt;code&gt;Member&lt;/code&gt; is split into code and data entities&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not yet convinced that this imaginary system is simpler than the original one?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No problem, I know how to convince you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s split every class of our original class diagram into code and data entities.
Now we have a system  made of two disjoint parts as shown in &lt;a href=&quot;#lib-mgmt-simplified-class-diagram&quot;&gt;A class diagram where every class is split into code and data entities&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;A part that involves only code entities&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A part that involves only data entities&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&quot;lib-mgmt-simplified-class-diagram&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/data-code-relation.png&quot; alt=&quot;data code relation&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. A class diagram where every class is split into code and data entities&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope that you agree that this system, made of two disjoint sub-systems, is simpler than the original one.
It&amp;#8217;s not simpler by accident, it is a logical consequence of separating code and data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Important&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
A system made of disjoint simple parts is less complex than a simple made of a single complex part.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;objects-are-mutable&quot;&gt;Objects are mutable&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are probably a bit tired with all the system-level analysis that we presented in the previous section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s get refreshed and look at some code. Well not exactly code, but pseudocode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please take a look at the pseudocode shown in &lt;a href=&quot;#code-simple&quot;&gt;[code-simple]&lt;/a&gt;:
we get the blocked status of a member and we display it twice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If I tell you that when I called &lt;code&gt;displayBlockedStatusTwice&lt;/code&gt;,
the program displayed &lt;code&gt;true&lt;/code&gt; on the first &lt;code&gt;print&lt;/code&gt; call,
can you tell me what the program displayed on the second &lt;code&gt;print&lt;/code&gt; call?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Member&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;{&lt;/span&gt;
      &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Bool&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;member&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;;&lt;/span&gt;

      &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;displayBlockedStatusTwice&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;{&lt;/span&gt;
         &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;isBlocked&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #008080&quot;&gt;isBlocked&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;()&lt;/span&gt;
         &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #008080&quot;&gt;Print&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;isBlocked&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;);&lt;/span&gt;
         &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #008080&quot;&gt;Print&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;isBlocked&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;);&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Of course, it displayed &lt;code&gt;true&lt;/code&gt; again&quot;, you tell me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And you are right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, please take a look at a slightly different pseudocode as shown in &lt;a href=&quot;#code-block-member&quot;&gt;Apparently simple pseudo code&lt;/a&gt;:
here we display twice the blocked status of a member without assigning a variable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Same question as before:
If I tell you that when I called &lt;code&gt;displayBlockedStatusTwice&lt;/code&gt;,
the program displayed &lt;code&gt;true&lt;/code&gt; on the first &lt;code&gt;print&lt;/code&gt; call,
can you tell me what the program displayed on the second &lt;code&gt;print&lt;/code&gt; call?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;code-block-member&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Apparently simple pseudo code&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Member&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;{&lt;/span&gt;
      &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;Bool&lt;/span&gt; &lt;span style=&quot;background-color: #f8f8f8&quot;&gt;member&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;;&lt;/span&gt;

      &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;displayBlockedStatusTwice&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #008080&quot;&gt;Print&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #008080&quot;&gt;isBlocked&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;);&lt;/span&gt;
        &lt;span style=&quot;color: #445588;font-weight: bold&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #008080&quot;&gt;Print&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #008080&quot;&gt;isBlocked&lt;/span&gt;&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;);&lt;/span&gt;
    &lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #000000;font-weight: bold&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your answer is &lt;code&gt;false&lt;/code&gt;, I am suggesting you to consult a therapist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your answer is &lt;code&gt;true&lt;/code&gt;, I am suggesting you to take a few seconds and think about it again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ll give you a clue: multi threading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The correct answer is: in a single threaded environment, it displays &lt;code&gt;true&lt;/code&gt;
while on a multi threaded environment it&amp;#8217;s unpredictable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Indeed in a multi threaded environment, between the two print calls,
there could be a context switch and the state of the member object could be changed (e.g. a librarian unblocked the member).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The difference between the two pseudocode snippets is that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;in the first snippet, we access twice a boolean value which is a primitive value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in the second snippet, we access twice a member of an object&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This unpredictable behavior of the second snippet is one of the annoying consequences of the fact that in OO, unlike
primitive types who are immutable, object members are mutable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One way to solve this problem in OO is to protect sensitive code with mutexes, but it introduces issues on its own like a performance hit and a risk of deadlocks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will see later in the book that DO treats every piece of data in the same way: both primitive types and collection types have immutable values.
This &quot;value treatment for all citizens&quot; brings to DO developers' minds a lot of serenity.
As a consequence, more cells of DO developers' minds are available
to handle the interesting pieces of the applications they build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Until then, keep you mind busy with boring stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you feel ready to explore more sources of complexity in OO, move to the &lt;a href=&quot;/databook/2020/09/25/data-book-chap1-part4.html&quot;&gt;next part&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published.</summary></entry><entry><title type="html">The complexity of Object Oriented Programming: DO magic sauce</title><link href="https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part4.html" rel="alternate" type="text/html" title="The complexity of Object Oriented Programming: DO magic sauce" /><published>2020-09-25T04:45:32+00:00</published><updated>2020-09-25T04:45:32+00:00</updated><id>https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part4</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part4.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to DO, the main sources of complexity of any OO system - are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Code and data are mixed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Objects are mutable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data is locked in objects as members&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code is locked into classes as methods&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;/databook/2020/09/25/data-book-chap1-part3.html&quot;&gt;previous part&lt;/a&gt;, we explored item #1 and #2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this part, we are going to explore item #3 and #4.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-wrong-with-you-oo&quot;&gt;What's wrong with you OO?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;data-is-locked-in-objects-as-members&quot;&gt;Data is locked in objects as members&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, you are really tired and you fall asleep at your desk&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You have a dream about Nancy, your customer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this dream, Nancy would want to make the library management system accessible via a REST API
using JSON as a transport layer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You would need to implement a &lt;code&gt;/search&lt;/code&gt; endpoint that receives
a query in JSON format and return results in JSON format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An input example of the &lt;code&gt;/search&lt;/code&gt; endpoint is shown in &lt;a href=&quot;#Listing-search-input-json&quot;&gt;A JSON input of the &lt;code&gt;/search&lt;/code&gt; endpoint&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;Listing-search-input-json&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A JSON input of the &lt;code&gt;/search&lt;/code&gt; endpoint&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
  &lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;&quot;searchCriteria&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
  &lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;albert&quot;&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An output example of the &lt;code&gt;/search&lt;/code&gt; endpoint is shown in &lt;a href=&quot;#Listing-search-output-json&quot;&gt;A JSON output of the &lt;code&gt;/search&lt;/code&gt; endpoint&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;Listing-search-output-json&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A JSON output of the &lt;code&gt;/search&lt;/code&gt; endpoint&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot; style=&quot;background-color: #f8f8f8&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
    &lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
        &lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;The world as I see it&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
        &lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;&quot;authors&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
            &lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
                &lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;&quot;fullName&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;Albert Einstein&quot;&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
            &lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
        &lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
    &lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;},&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
    &lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
        &lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;The Stranger&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
        &lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;&quot;authors&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
            &lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
                &lt;/span&gt;&lt;span style=&quot;color: #990000;font-weight: bold&quot;&gt;&quot;fullName&quot;&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #d14&quot;&gt;&quot;Albert Camus&quot;&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
            &lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
        &lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
    &lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #bbbbbb&quot;&gt;
&lt;/span&gt;&lt;span style=&quot;background-color: #f8f8f8&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You would probably implement the &lt;code&gt;/search&lt;/code&gt; endpoint by creating three classes similarly to what is
shown in &lt;a href=&quot;#json-search-controller&quot;&gt;A class diagram where every class is split into code and data entities&lt;/a&gt; (Not surprising: everything in OO has to be wrapped in a class. Right?):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SearchController&lt;/code&gt; that is responsible for handling the query&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SearchQuery&lt;/code&gt; that converts the JSON query string into data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SearchResult&lt;/code&gt; that converts the search result data into a JSON string&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;SearchController&lt;/code&gt; would have a single &lt;code&gt;handle&lt;/code&gt; method with the following flow:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;SearchQuery&lt;/code&gt; object from the JSON query string&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Retrieve &lt;code&gt;searchCriteria&lt;/code&gt; and &lt;code&gt;queryStr&lt;/code&gt; from the &lt;code&gt;SearchQuery&lt;/code&gt; object&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Call the &lt;code&gt;search&lt;/code&gt; method of the &lt;code&gt;catalog:Catalog&lt;/code&gt; with  &lt;code&gt;searchCriteria&lt;/code&gt; and &lt;code&gt;queryStr&lt;/code&gt; and receives &lt;code&gt;books:List&amp;lt;Book&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;SearchResult&lt;/code&gt; object with &lt;code&gt;books&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert the &lt;code&gt;SearchResult&lt;/code&gt; object to a &lt;code&gt;JSON&lt;/code&gt; string&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&quot;json-search-controller&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/json-search-controller.png&quot; alt=&quot;json search controller&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. A class diagram where every class is split into code and data entities&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What about other endpoints, for instance allowing librarians to add book items through &lt;code&gt;/add-book-item&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, you would have to repeat the exact same process and create 3 classes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AddBookItemController&lt;/code&gt; that is responsible for handling the query&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BookItemQuery&lt;/code&gt; that converts the JSON query string into data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BookItemResult&lt;/code&gt; that converts the search result into a JSON string&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code that deals with JSON deserialization that you wrote previously in &lt;code&gt;SearchQuery&lt;/code&gt; would have to
be rewritten in &lt;code&gt;BookItemQuery&lt;/code&gt;.
Same thing for the code that deals with JSON serialization that you wrote previously in &lt;code&gt;SearchResult&lt;/code&gt;:
it would have to be rewritten in &lt;code&gt;BookItemResult&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The bad news is that you would have to repeat the same process for every endpoint of the system.
Each time you encounter a new kind of JSON input or input, you have to create a new class and write code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Suddenly, you wake up and realize that Nancy never asked for JSON.
All of the above was a dream, a really bad dream&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
In OO, data serialization is a nightmare
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s quite frustrating that handling JSON serialization and deserialization in OO requires
to add so many classes and to write so much code again and again!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The frustration gets bigger when you consider that serializing a search query, a book item query or any query is quite similar.
It comes down to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Go over data fields&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concatenate the name of the data fields and the value of the data field (separated by a comma)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Why such a simple thing is so hard to achieve in OO?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The thing is that in OO, data has to follow a rigid shape (defined in classes),
which means that data is locked in members.
There is no way to access data generically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
In OO, data is locked in classes as members
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will refine later what we mean by a generic access to the data and
we will see how DO provides a generic way to handle JSON serialization and deserialization.
Until then, you will have to continue suffering.
But at least you know that this suffer is avoidable. (Not sure if it makes your suffer more pleasant or more painful&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Most OO programming languages provide ways to ease a bit the conversion from and to JSON. It either involves reflection (which is definitely a complex thing) or code verbosity.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;code-is-locked-into-classes-as-methods&quot;&gt;Code is locked into classes as methods&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is a common belief that OO promotes code reuse through class inheritance.
Indeed, when every requirement of the system is known up front, you design your class hierarchy is such a way that
classes with common behavior derive from a base class.
An example of this pattern is shown in &lt;a href=&quot;#class-diagram-librarian-member&quot;&gt;The part of the class diagram that deals with members and librarians&lt;/a&gt; , that zooms in the part of our
class diagram that deals with members and librarians.
Both librarians and members need the ability to login and they inherit this ability form the &lt;code&gt;User&lt;/code&gt; class.
So far so good.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;class-diagram-librarian-member&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/class-diagram-librarian-member.png&quot; alt=&quot;class diagram librarian member&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. The part of the class diagram that deals with members and librarians&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But when requirements to the system are added after the system is implemented that&amp;#8217;s a completely different story.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s Monday 11:00 AM, two days are left before the deadline (which is on Wednesday midnight) and Nancy put your on an urgent phone call.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are not sure if it&amp;#8217;s dream or reality.
You pinch yourself and you feel the jolt.
It&amp;#8217;s definitely reality!&lt;/p&gt;
&lt;/div&gt;
- How is the project doing?
- Fine, Nancy. We are on schedule for the deadline. Running our last round of regression tests.
- Fantastic! It means we have time for adding a tiny feature to the system. Right?
- Depends what you mean by &quot;tiny&quot;.
- We need to add VIP members to the system.
- What do you mean by VIP members?
- VIP members are members that are allowed to add by themselves book items to the library.
- Hmm...
- What?
- That's not a tiny change!
- Why?
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am asking you the same question Nancy asked: Why adding VIP members to your system is not a tiny task?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After all, you already have written the code that allows librarians to add book items to the library:
it&amp;#8217;s in &lt;code&gt;Librarian::addBookItem()&lt;/code&gt;.
What prevents you from reusing this code for VIP members?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reason is that in OO, the code is locked into classes as methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see how you would probably handle this last minute request from your customer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
VIP members are members that are allowed to add by themselves book items to the library.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s decompose the customer requirements into two pieces:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;VIP members are members&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VIP members are allowed to add by themselves book items to the library&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For sure, you need a new class &lt;code&gt;VIPMember&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For requirement #1, it sounds reasonable to make &lt;code&gt;VIPMember&lt;/code&gt; derive from &lt;code&gt;Member&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, handling requirement #2 is more complex. We cannot make &lt;code&gt;VIPMember&lt;/code&gt; derive from &lt;code&gt;Librarian&lt;/code&gt; because the relationship between &lt;code&gt;VIPMember&lt;/code&gt; and &lt;code&gt;Librarian&lt;/code&gt; is not linear:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;On one hand, VIP members are like librarians as they are allowed to add book items&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the other hand, VIP members are not like librarians as they are not allowed to block members or to list the book lendings of a member&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem is that the code that adds book items is locked in the &lt;code&gt;Librarian&lt;/code&gt; class.
There is no way for &lt;code&gt;VIPMember&lt;/code&gt; class to use this code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One possible solution that makes the code of &lt;code&gt;Librarian::addBookItem()&lt;/code&gt; available to both &lt;code&gt;Librarian&lt;/code&gt; and &lt;code&gt;VIPMember&lt;/code&gt;,
is shown in &lt;a href=&quot;#class-diagram-vip-member&quot;&gt;A class diagram for a system with VIP members&lt;/a&gt;. Here are the changes to the previous class diagram:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;A base class &lt;code&gt;UserWithBookItemRight&lt;/code&gt; that extends &lt;code&gt;User&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move &lt;code&gt;addBookItem()&lt;/code&gt; from &lt;code&gt;Librarian&lt;/code&gt; to &lt;code&gt;UserWithBookItemRight&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both &lt;code&gt;VIPMember&lt;/code&gt; and &lt;code&gt;Librarian&lt;/code&gt; extend &lt;code&gt;UserWithBookItemRight&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&quot;class-diagram-vip-member&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/class-diagram-vip-member.png&quot; alt=&quot;class diagram vip member&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. A class diagram for a system with VIP members&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That was tough but you were able to handle it on time (thanks to a white night in front of your laptop).
You were even able to include new tests to the system and running again the regression tests.
You were so excited that you didn&amp;#8217;t pay attention to the diamond &lt;code&gt;VIPMember&lt;/code&gt; introduced in your class diagram,
(&lt;code&gt;VIPMember&lt;/code&gt; extends both &lt;code&gt;Member&lt;/code&gt; and &lt;code&gt;UserWithBookItemRight&lt;/code&gt; who both extend &lt;code&gt;User&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are Wednesday morning 10:00 AM, 14 hours before the deadline and you call Nancy to tell her the good news:&lt;/p&gt;
&lt;/div&gt;
- We were able to add VIP members to the system on time, Nancy.
- Fantastic! I told you it was a tiny feature.
- Hmm...
- Look, I was to call you anyway. I just finished a meeting with my business partner and we realized that we need another tiny feature before the launch. Will you be able to handle it before the deadline?
- Again, it depends what you mean by &quot;tiny&quot;.
- We need to add Super members to the system.
- What do you mean by Super members?
- Super members are members that are allowed to block and unblock members
- Hmm...
- What?
- That's not a tiny change!
- Why?
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like with VIP members, adding Super members to the system requires changes to your class hierarchy.
A possible solution is shown in &lt;a href=&quot;#class-diagram-super-member&quot;&gt;A class diagram for a system with Super members and VIP members&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;class-diagram-super-member&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/class-diagram-super-member.png&quot; alt=&quot;class diagram super member&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. A class diagram for a system with Super members and VIP members&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The addition of Super members made the system too complex. You suddenly noticed that you had 3 diamonds in your class diagram:
not gemstones but 3 Deadly Diamonds of Death!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You tried to avoid the diamonds by transforming the &lt;code&gt;User&lt;/code&gt; class into an interface and using Composition over Inheritance Design Pattern.
But with the stress of the deadline coming, you were not able to use all the cells of your brain. (Indeed all the cells of a human brain are required to handle this OO complexity!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact, this complexity prevented you from delivering the system before the deadline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You call the customer in order to explain her the situation at 10:00 PM, two hours before the deadline:&lt;/p&gt;
&lt;/div&gt;
- Look Nancy, we really did our best, but we will not be able to add Super members to the system before the deadline
- No worries, my business partner and I decided to postpone the launch by a week
- Phew!
- Do you think that if we add other tiny features next week, you'd be able to handle them on time?
- Yes
- How could it be?
- We are going to refactor the system from Object Oriented to Data Oriented over the weekend.
- What is Data Oriented?
- It is a magic sauce that allows developers to write code faster!
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By the end of this book, you will belong to the community of happy developers who know the recipe
of DO magic sauce.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You must be tired with all this OO complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I invite you to imagine a world with no objects and sing a song. Here are the &lt;a href=&quot;/databook/2020/09/25/data-book-chap1-part5.html&quot;&gt;lyrics&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published. According to DO, the main sources of complexity of any OO system - are:</summary></entry><entry><title type="html">The complexity of Object Oriented Programming: Imagine</title><link href="https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part5.html" rel="alternate" type="text/html" title="The complexity of Object Oriented Programming: Imagine" /><published>2020-09-25T04:45:32+00:00</published><updated>2020-09-25T04:45:32+00:00</updated><id>https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part5</id><content type="html" xml:base="https://blog.klipse.tech//databook/2020/09/25/data-book-chap1-part5.html">&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A couple of years ago, a famous composer had an illumination and he wrote a song about a world without OO.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/imagine.jpeg&quot; alt=&quot;imagine&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine there&amp;#8217;s no objects&lt;br&gt;
It&amp;#8217;s easy if you try&lt;br&gt;
No classes below us&lt;br&gt;
Above us only information&lt;br&gt;
Imagine all the entities being only data&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine there&amp;#8217;s no mutations&lt;br&gt;
It isn&amp;#8217;t hard to do&lt;br&gt;
Nothing to protect with a mutex&lt;br&gt;
And no deadlock too&lt;br&gt;
Imagine all the entities being only data&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may say I&amp;#8217;m a dreamer&lt;br&gt;
But I&amp;#8217;m not the only one&lt;br&gt;
I hope some day OO will join us&lt;br&gt;
And the world will be as one&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine no code is locked&lt;br&gt;
I wonder if you can&lt;br&gt;
No need for methods and inheritance&lt;br&gt;
A brotherhood of input and output&lt;br&gt;
Imagine all the code being pure functions&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may say I&amp;#8217;m a dreamer&lt;br&gt;
But I&amp;#8217;m not the only one&lt;br&gt;
I hope some day OO will join us&lt;br&gt;
And the world will be as one&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021).
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    Enter your email address below to get notified when the book is published.
  &lt;/p&gt;

  &lt;form style=&quot;text-align: left;&quot; action=&quot;https://tinyletter.com/data-oriented-programming&quot; method=&quot;post&quot; target=&quot;popupwindow&quot; onsubmit=&quot;window.open('https://tinyletter.com/data-oriented-programming', 'popupwindow', 'scrollbars=yes,width=800,height=600');return true&quot;&gt;
	  &lt;input type=&quot;email&quot; style=&quot;width:180px&quot; name=&quot;email&quot; id=&quot;tlemail&quot; placeholder=&quot;Your email address&quot;/&gt;
	  &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;embed&quot;/&gt;
	  &lt;input style=&quot;padding-left:10px; font-size: larger; color: #5f7fbf; font-weight: bold;&quot; type=&quot;submit&quot; value=&quot;Subscribe&quot; /&gt;
  &lt;/form&gt;
  &lt;br&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><summary type="html">This article is an excerpt from my upcoming book about Data Oriented Programming. The book will be published by Manning, once it is completed (hopefully in 2021). More excerpts are available on my blog. Enter your email address below to get notified when the book is published.</summary></entry><entry><title type="html">Core.match available for self hosted ClojureScript (Planck and Klipse)</title><link href="https://blog.klipse.tech//clojure/2020/09/16/core-match-abbinare.html" rel="alternate" type="text/html" title="Core.match available for self hosted ClojureScript (Planck and Klipse)" /><published>2020-09-16T13:21:32+00:00</published><updated>2020-09-16T13:21:32+00:00</updated><id>https://blog.klipse.tech//clojure/2020/09/16/core-match-abbinare</id><content type="html" xml:base="https://blog.klipse.tech//clojure/2020/09/16/core-match-abbinare.html">&lt;p&gt;&lt;a href=&quot;https://github.com/clojure/core.match&quot;&gt;core.match&lt;/a&gt; - A pattern matching library for Clojure[script] - is  available for self-hosted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClojureScript&lt;/code&gt;. It means that it can run in &lt;a href=&quot;https://github.com/mfikes/planck&quot;&gt;Planck&lt;/a&gt; and &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code is available as a &lt;a href=&quot;https://github.com/viebel/abbinare&quot;&gt;fork&lt;/a&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core.match&lt;/code&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abbinare&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The approach is similar to what Mike Fikes did for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core.async&lt;/code&gt; with &lt;a href=&quot;https://github.com/mfikes/andare&quot;&gt;andare&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Both names comes from italian: “andare” means “go” and “abbinare” means match (in the sense of combine).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/match.jpg&quot; alt=&quot;match&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core.match&lt;/code&gt; in Klipse, simply require it and Klipse will fetch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abbinare&lt;/code&gt; code from its &lt;a href=&quot;https://viebel.github.io/cljs-analysis-cache/cache/&quot;&gt;analysis cache repository&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;
(require '[cljs.core.match :refer-macros [match]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core.match&lt;/code&gt; in Planck, add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abbinare&lt;/code&gt; as a dependency with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [viebel/abbinare &quot;1.10.597&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is a quick demo - running in your browser - of a solution to the famous &lt;a href=&quot;https://en.wikipedia.org/wiki/Fizz_buzz&quot;&gt;Fizz buzz&lt;/a&gt; interview question with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core.match&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(with-out-str (doseq [n (range 1 11)]
  (println
    (match [(mod n 3) (mod n 5)]
           [0 0] &quot;FizzBuzz&quot;
           [0 _] &quot;Fizz&quot;
           [_ 0] &quot;Buzz&quot;
           :else n))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Want more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core.match&lt;/code&gt; cool stuff in your browser? Read this &lt;a href=&quot;/clojure/2016/10/25/core-match.html&quot;&gt;core.match interactive tutorial&lt;/a&gt;.&lt;/p&gt;</content><author><name>Yehonathan Sharvit</name></author><summary type="html">core.match - A pattern matching library for Clojure[script] - is available for self-hosted ClojureScript. It means that it can run in Planck and Klipse.</summary></entry><entry><title type="html">The most elegant implementation of FizzBuzz</title><link href="https://blog.klipse.tech//clojure/2020/09/11/fizbuzz-clj.html" rel="alternate" type="text/html" title="The most elegant implementation of FizzBuzz" /><published>2020-09-11T04:28:22+00:00</published><updated>2020-09-11T04:28:22+00:00</updated><id>https://blog.klipse.tech//clojure/2020/09/11/fizbuzz-clj</id><content type="html" xml:base="https://blog.klipse.tech//clojure/2020/09/11/fizbuzz-clj.html">&lt;h3 id=&quot;what-is-fizzbuzz&quot;&gt;What is FizzBuzz?&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FizzBuzz&lt;/code&gt; test is an interview question designed to help filter out the 99.5% of programming job candidates who can’t seem to program their way out of a wet paper bag. 
The text of the programming assignment is as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Write a program that prints the numbers from 1 to 100. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are a lot of ways to write the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FizzBuzz&lt;/code&gt; program. See for instance &lt;a href=&quot;http://blog.klipse.tech/clojure/2016/10/25/core-match.html#fizzbuzz&quot;&gt;the one using Clojure pattern matching&lt;/a&gt;. 
Today, I’d like to share with you the most elegant implementation of FizzBuzz I’ve ever seen. It’s elegant because it doesn’t make use of any imperative constructs (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statements), but only functional programming constructs (like infinite lazy sequences and function composition).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog_purity.jpg&quot; alt=&quot;Pure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This implementation was developed by &lt;a href=&quot;https://dierk.gitbooks.io/fregegoodness/content/src/docs/asciidoc/fizzbuzz.html&quot;&gt;Dierk Konig&lt;/a&gt; and Kevlin Henney presented a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Haskell&lt;/code&gt; version of it - in his amazing talk &lt;a href=&quot;https://youtu.be/nrVIlhtoE3Y&quot;&gt;Declarative Thinking, Declarative Practice&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we are going to present an interactive version of Kevlin’s code in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Clojure&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-elegant-code&quot;&gt;The elegant code&lt;/h3&gt;

&lt;p&gt;Take a look at this marvel: no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statements - only 3 infinite lazy sequences and function composition.&lt;/p&gt;

&lt;p&gt;This is exactly what we call -  &lt;strong&gt;Purely Functional&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot; data-gist-id=&quot;viebel/b133efde8669d6c0630ee6895c1797c6&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it works like a charm:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(fizzbuzz 19)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Feel free to modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;19&lt;/code&gt; - the code snippets are &lt;strong&gt;live&lt;/strong&gt; and &lt;strong&gt;interactive&lt;/strong&gt; powered by the &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse plugin&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Live&lt;/strong&gt;: The code is executed in your browser&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interactive&lt;/strong&gt;: You can modify the code and it is evaluated as you type&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are a bit skeptic (yet) about the elegance of this implementation, you might want to read &lt;a href=&quot;https://dierk.gitbooks.io/fregegoodness/content/src/docs/asciidoc/fizzbuzz.html&quot;&gt;Dierk Konig’s article&lt;/a&gt;: he explains in details the pragmatic advantages of his code.&lt;/p&gt;

&lt;h3 id=&quot;further-details&quot;&gt;Further details&lt;/h3&gt;

&lt;p&gt;You probably wonder what is this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;choice&lt;/code&gt; function and why does &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;/code&gt; do when it receives 2 strings?&lt;/p&gt;

&lt;p&gt;Well, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClojureScript&lt;/code&gt; runs on top of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; - and in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;, strings are comparable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(&amp;gt; &quot;Fizz&quot; &quot;&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(max &quot;Fizz&quot; &quot;&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But that is an ugly trick - that doesn’t work in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Clojure&lt;/code&gt;. So it’s much better to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;choice&lt;/code&gt; function - that returns the first non-empty string of the two it receives:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(choice &quot;abc&quot; &quot;&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot; data-gist-id=&quot;viebel/564b99b1365d1966342ad0a0977b94b3&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it works also:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(fizzbuzz-clean 15)
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Yehonathan Sharvit</name></author><summary type="html">What is FizzBuzz?</summary></entry><entry><title type="html">Generative testing in Clojure with test.check</title><link href="https://blog.klipse.tech//clojure/2020/09/11/test-check-clj.html" rel="alternate" type="text/html" title="Generative testing in Clojure with test.check" /><published>2020-09-11T02:11:22+00:00</published><updated>2020-09-11T02:11:22+00:00</updated><id>https://blog.klipse.tech//clojure/2020/09/11/test-check-clj</id><content type="html" xml:base="https://blog.klipse.tech//clojure/2020/09/11/test-check-clj.html">&lt;h3 id=&quot;the-idea&quot;&gt;The idea&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/clojure/test.check&quot;&gt;test.check&lt;/a&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Clojure&lt;/code&gt; property-based testing tool inspired by &lt;a href=&quot;https://en.wikipedia.org/wiki/QuickCheck&quot;&gt;QuickCheck&lt;/a&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Haskell&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The core idea of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.check&lt;/code&gt; is that instead of enumerating expected input and output for unit tests, you write properties about your function that should
hold true for all inputs.&lt;/p&gt;

&lt;p&gt;This lets you write concise, powerful tests.&lt;/p&gt;

&lt;p&gt;In a sense it gives you the illusion that you deal with the infinity.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/infinity.jpg&quot; alt=&quot;Infinity&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;code-examples&quot;&gt;Code examples&lt;/h4&gt;

&lt;p&gt;First, let’s require &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.check&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot; data-external-libs=&quot;https://raw.githubusercontent.com/clojure/test.check/master/src/main/clojure&quot;&gt;
(ns my.test
  (:require [clojure.test.check :as tc]
            [clojure.test.check.generators :as gen]
            [clojure.test.check.properties :as prop :include-macros true]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s say we’re testing a sort function. We want to check that that our sort function is &lt;strong&gt;idempotent&lt;/strong&gt; - that is, applying sort twice should be equivalent to
applying it once: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(= (sort a) (sort (sort a)))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s write a quick test to make sure this is the case:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(def sort-idempotent-prop
  (prop/for-all [v (gen/vector gen/int)]
    (= (sort v) (sort (sort v)))))

(tc/quick-check 100 sort-idempotent-prop)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In prose, this test reads: for all vectors of integers, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt;, sorting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt; is equal to sorting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt; twice.&lt;/p&gt;

&lt;p&gt;What happens if our test fails? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.check&lt;/code&gt; will try and find ‘smaller’ inputs that still fail. This process is called &lt;strong&gt;shrinking&lt;/strong&gt;. Let’s see it in action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(def prop-sorted-first-less-than-last
  (prop/for-all [v (gen/not-empty (gen/vector gen/int))]
    (let [s (sort v)]
      (&amp;lt; (first s) (last s)))))

(tc/quick-check 100 prop-sorted-first-less-than-last)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This test claims that the first element of a sorted vector should be less-than the last. Of course, this isn’t true: the test fails with input &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[3]&lt;/code&gt;, which gets shrunk down to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[0]&lt;/code&gt;, as seen in the output above.&lt;/p&gt;

&lt;h3 id=&quot;deterministic-randomness&quot;&gt;Deterministic Randomness&lt;/h3&gt;

&lt;p&gt;Each time you call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tc/quick-check&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.check&lt;/code&gt; generates different test cases - as you can see in this two examples where the failing test cases are always different:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(:fail (tc/quick-check 100 prop-sorted-first-less-than-last))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(:fail (tc/quick-check 100 prop-sorted-first-less-than-last))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what if you want to re-run exactly the same values?&lt;/p&gt;

&lt;p&gt;No problem: pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:seed&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tc/quick-check&lt;/code&gt; and you’ll run always the same values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(:fail (tc/quick-check 100 prop-sorted-first-less-than-last :seed 1477508406394))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(:fail (tc/quick-check 100 prop-sorted-first-less-than-last :seed 1477508406394))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;shrinking&quot;&gt;Shrinking&lt;/h3&gt;
&lt;p&gt;As your test functions require more  sophisticated input, shrinking becomes critical to being able to understand exactly why a random test failed.
To see how powerful shrinking is, let’s come up with a contrived example: a function that fails if it’s passed a sequence that contains the number &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(def prop-no-12
  (prop/for-all [v (gen/vector gen/int)]
    (not (some #{12} v))))

(tc/quick-check 100 prop-no-12)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see that the test failed on a rather large vector, as seen in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:fail&lt;/code&gt; key. But then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.check&lt;/code&gt; was able to shrink the input down to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[12]&lt;/code&gt;, as seen in the keys &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:shrunk :smallest]&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;zipmap&quot;&gt;zipmap&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(zipmap keys vals)&lt;/code&gt; allows you to creates a map with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keys&lt;/code&gt; mapped to the corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vals&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(keys map)&lt;/code&gt; retrieves the keys of a map.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(vals map)&lt;/code&gt; retrieves the values of a map.&lt;/p&gt;

&lt;p&gt;But how well do they combine together?&lt;/p&gt;

&lt;p&gt;According to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keys&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vals&lt;/code&gt; docstrings, the keys and the values are returned in the same order - the order of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(seq map)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And indeed, for map with 100 pairs of random integers, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipmap&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keys&lt;/code&gt; and  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vals&lt;/code&gt; are consistent:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(def n 100)
(def mm (zipmap (shuffle (range n)) (shuffle (range n))))
[(count mm) (= mm (zipmap (keys mm) (vals mm)))]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can try to increase the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; - and it will remain true. But is it a proof? What about keys and values from other types?&lt;/p&gt;

&lt;p&gt;Let’s check it for sure - using a more advanced random genertor, provided by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test.check&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(def random-map (gen/map (gen/one-of [gen/keyword gen/string gen/boolean gen/int gen/symbol]) gen/int))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(gen/one-of generators)&lt;/code&gt; creates a generator that randomly chooses a value from the list of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generators&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(gen/map map key-gen val-gen)&lt;/code&gt; creates a generator that generates maps, with keys chosen from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key-gen&lt;/code&gt; and values chosen from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val-gen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at some samples - with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gen/sample&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(gen/sample random-map)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can test the consistency of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipmap&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keys&lt;/code&gt; and  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vals&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-clj&quot;&gt;(def zipmap-keys-vals-consistency
  (prop/for-all [m (gen/map (gen/one-of [gen/keyword gen/string gen/boolean gen/int gen/symbol]) gen/int)]
                  (= m (zipmap (keys m) (vals m)))))

(tc/quick-check 15 zipmap-keys-vals-consistency)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seems that the docstrings were right: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipmap&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keys&lt;/code&gt; and  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vals&lt;/code&gt; are consistent.&lt;/p&gt;

&lt;p&gt;Check &lt;a href=&quot;http://clojure.github.io/test.check/index.html&quot;&gt;test.check documentation&lt;/a&gt; for additional functions and explanations.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I hope that you enjoyed this interactive tutorial about generative testing in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clojure&lt;/code&gt;. This is really a powerful paradigm that might change forever the way you write and think about testing. And who know? Maybe it will catch a bug or two…&lt;/p&gt;

&lt;p&gt;Please forward it to your friends if you liked it and share your critics on &lt;a href=&quot;https://twitter.com/viebel&quot;&gt;twitter @viebel&lt;/a&gt; or on slack &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#klipse&lt;/code&gt; channel.&lt;/p&gt;</content><author><name>Yehonathan Sharvit</name></author><summary type="html">The idea test.check is a Clojure property-based testing tool inspired by QuickCheck from Haskell.</summary></entry><entry><title type="html">Symbolic Computation in JavaScript with Math.js</title><link href="https://blog.klipse.tech//javascript/2020/09/10/symbolic-computation-math-js.html" rel="alternate" type="text/html" title="Symbolic Computation in JavaScript with Math.js" /><published>2020-09-10T14:08:22+00:00</published><updated>2020-09-10T14:08:22+00:00</updated><id>https://blog.klipse.tech//javascript/2020/09/10/symbolic-computation-math-js</id><content type="html" xml:base="https://blog.klipse.tech//javascript/2020/09/10/symbolic-computation-math-js.html">&lt;p&gt;&lt;a href=&quot;http://mathjs.org/index.html&quot;&gt;Math.js&lt;/a&gt; is an extensive math library for JavaScript and Node.js.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.js&lt;/code&gt; comes with a function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;math.evaluate&lt;/code&gt; to evaluate expressions.&lt;/p&gt;

&lt;p&gt;In this blog post, we are going to see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.js&lt;/code&gt; evaluator in action with interactive code snippets powered by the &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pi.tedcdn.com/r/pf.tedcdn.com/images/playlists/hated_math_1200x627.jpg?c=1050%2C550&amp;amp;w=1050&quot; alt=&quot;Math&quot; /&gt;&lt;/p&gt;

&lt;pre class=&quot;hidden&quot;&gt;&lt;code class=&quot;language-js&quot; data-external-libs=&quot;https://raw.githubusercontent.com/josdejong/mathjs/master/dist/math.min.js&quot;&gt;
  Object.keys(math)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;simple-expressions&quot;&gt;Simple expressions&lt;/h1&gt;

&lt;p&gt;Easy power:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;math.evaluate('sqrt(3^2 + 4^2)'); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Implicit multiplication:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;math.evaluate('(2+3)(4+5)');  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Complex numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;math.evaluate('sqrt(-1)').toString();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;math.evaluate('sqrt(1+i)').toString();  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy trigonometry:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;math.evaluate('cos(pi)')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But the real power of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.js&lt;/code&gt; comes with the ability to define symbolic expressions…&lt;/p&gt;

&lt;h1 id=&quot;defining-symbolic-functions&quot;&gt;Defining symbolic functions&lt;/h1&gt;

&lt;p&gt;First, we need to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scope&lt;/code&gt; for our evaluation environment: The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scope&lt;/code&gt; is a regular JavaScript Object that is used to resolve symbols, and to write assigned variables or function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;scope = {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we can create functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;math.evaluate('bar(x,y) = (x+y)(x-y)', scope)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And call them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;math.evaluate('bar(10,5)', scope)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let’s check that for any angle, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sinus squared + cosinus squared&lt;/code&gt; equals 1:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;math.evaluate('amp(x,y) = sqrt(x^2 + y^2)', scope)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;math.evaluate('foo(x)=amp(sin(x), cos(x))', scope)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;math.evaluate('foo(pi/2)',scope)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope that I have been able to trigger your curiousity about &lt;a href=&quot;http://mathjs.org/index.html&quot;&gt;Math.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And that you cannot wait to use the &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse plugin&lt;/a&gt; on your next blog post.&lt;/p&gt;

&lt;p&gt;Happy interactive coding!&lt;/p&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjs/7.2.0/math.min.js&quot; integrity=&quot;sha512-4VdpCxbABk7wjJb/9z/d3EyibeHwUY0FgHbFO4EiIPVtyyV6llhENCvzRk8SH5D86+Jwm6QLagqRRnEJCd3gJg==&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</content><author><name>Yehonathan Sharvit</name></author><summary type="html">Math.js is an extensive math library for JavaScript and Node.js.</summary></entry></feed>